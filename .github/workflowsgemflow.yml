name: Bug Fix with Gemini AI
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  bug-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      # Checkout the repository code
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Get the diff of the pull request
      - name: Get PR Diff
        id: get_diff
        shell: bash
        env:
          PULL_REQUEST_HEAD_REF: "${{ github.event.pull_request.head.ref }}"
          PULL_REQUEST_BASE_REF: "${{ github.event.pull_request.base.ref }}"
        run: |
          git fetch origin "${{ env.PULL_REQUEST_HEAD_REF }}"
          git fetch origin "${{ env.PULL_REQUEST_BASE_REF }}"
          git checkout "${{ env.PULL_REQUEST_HEAD_REF }}"
          git diff "origin/${{ env.PULL_REQUEST_BASE_REF }}" > diff.txt
          { echo "pull_request_diff<<EOF"; cat diff.txt; echo 'EOF'; } >> $GITHUB_OUTPUT

      # Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Install dependencies
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai requests

      # Run Gemini API script to analyze code and suggest fixes
      - name: Analyze Code with Gemini API
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python .github/scripts/analyze_code.py
        with:
          diff: ${{ steps.get_diff.outputs.pull_request_diff }}
          pr_number: ${{ github.event.pull_request.number }}
          repo: ${{ github.repository }}

# Script to analyze code and post comments
.github/scripts/analyze_code.py:
```python
import os
import json
import requests
import google.generativeai as genai

# Configure Gemini API
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel('gemini-1.5-pro-latest')

# GitHub API setup
GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')
REPO = os.getenv('repo')
PR_NUMBER = os.getenv('pr_number')
DIFF = os.getenv('diff')

GITHUB_API_URL = f"https://api.github.com/repos/{REPO}/pulls/{PR_NUMBER}/comments"
HEADERS = {
    "Authorization": f"Bearer {GITHUB_TOKEN}",
    "Accept": "application/vnd.github+json"
}

def chunk_diff(diff, max_tokens=3500):
    """Split diff into chunks to respect token limits."""
    lines = diff.split('\n')
    chunks = []
    current_chunk = []
    current_length = 0
    
    for line in lines:
        line_length = len(line)
        if current_length + line_length > max_tokens:
            chunks.append('\n'.join(current_chunk))
            current_chunk = [line]
            current_length = line_length
        else:
            current_chunk.append(line)
            current_length += line_length
    if current_chunk:
        chunks.append('\n'.join(current_chunk))
    return chunks

def analyze_code_chunk(chunk):
    """Analyze a code chunk using Gemini API and return suggested fixes."""
    prompt = f"""
    You are an expert code reviewer. Review the following code diff and identify potential bugs.
    For each bug found, provide:
    1. A description of the bug
    2. The affected code snippet
    3. A suggested fix with code
    Focus on Python code and common issues like:
    - Null pointer exceptions
    - Resource leaks
    - Logical errors
    - Performance issues
    - Security vulnerabilities
    Respond in JSON format with an array of bug reports.
    
    Diff:
    ```diff
    {chunk}
    ```
    """
    try:
        response = model.generate_content(prompt)
        return json.loads(response.text.strip('```json\n```'))
    except Exception as e:
        print(f"Error analyzing chunk: {e}")
        return []

def post_comment(bug_report, line_number):
    """Post a comment to the PR with the bug fix suggestion."""
    comment_body = f"""
**Bug Found**: {bug_report['description']}

**Affected Code**:
```python
{bug_report['affected_code']}
```

**Suggested Fix**:
```python
{bug_report['suggested_fix']}
```
"""
    payload = {
        "body": comment_body,
        "commit_id": os.getenv('GITHUB_SHA'),
        "path": bug_report.get('file_path', 'unknown'),
        "line": line_number,
        "side": "RIGHT"
    }
    response = requests.post(GITHUB_API_URL, headers=HEADERS, json=payload)
    if response.status_code != 201:
        print(f"Failed to post comment: {response.text}")

def main():
    # Split diff into chunks
    chunks = chunk_diff(DIFF)
    
    # Analyze each chunk
    for chunk in chunks:
        bug_reports = analyze_code_chunk(chunk)
        for report in bug_reports:
            # Estimate line number (simplified; improve based on diff parsing)
            line_number = report.get('line_number', 1)
            post_comment(report, line_number)

if __name__ == "__main__":
    main()
