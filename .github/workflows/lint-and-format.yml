name: Lint and Format Python Code

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      base_directory:
        description: 'Base directory to search for Python files'
        required: true
        default: '.'
      file_pattern:
        description: 'Glob pattern for Python files (e.g., "**/*.py")'
        required: true
        default: '**/*.py'
      commit_message:
        description: 'Custom commit message for formatting changes'
        required: false
        default: 'Apply automated linting and formatting'

jobs:
  validate-and-init:
    runs-on: ubuntu-latest
    outputs:
      repo_access: ${{ steps.validate-repo.outputs.repo_access }}
    steps:
      - name: Initialize Lint Report
        run: |
          echo "Linting and Formatting Report" > lint_report.txt
          echo "=============================" >> lint_report.txt
          echo "Workflow started at $(date)" >> lint_report.txt

      - name: Validate Repository Access
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Validating repository access..." >> lint_report.txt
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}" > repo.json
          if grep -q '"message": "Not Found"' repo.json; then
            echo "Error: Repository not found or GITHUB_TOKEN lacks access" >> lint_report.txt
            echo "repo_access=false" >> $GITHUB_OUTPUT
          elif grep -q '"message": "Bad credentials"' repo.json; then
            echo "Error: GITHUB_TOKEN is invalid" >> lint_report.txt
            echo "repo_access=false" >> $GITHUB_OUTPUT
          else
            echo "Repository access validated successfully" >> lint_report.txt
            echo "repo_access=true" >> $GITHUB_OUTPUT
          fi
        id: validate-repo

      - name: Upload Initial Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint_report.txt
          retention-days: 7
          if-no-files-found: warn

  lint-and-format:
    runs-on: ubuntu-latest
    needs: validate-and-init
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Download Initial Lint Report
        uses: actions/download-artifact@v4
        with:
          name: lint-report
          path: .

      - name: Checkout code
        if: needs.validate-and-init.outputs.repo_access == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        continue-on-error: true
        id: checkout

      - name: Debug Checkout Result
        run: |
          if [ "${{ steps.checkout.outcome }}" == "success" ]; then
            echo "Checkout successful" >> lint_report.txt
            echo "git_available=true" >> $GITHUB_OUTPUT
          else
            echo "Warning: Checkout failed, proceeding without Git operations" >> lint_report.txt
            echo "git_available=false" >> $GITHUB_OUTPUT
            cat ${{ steps.checkout.outputs.error }} >> lint_report.txt 2>/dev/null || echo "No checkout error details available" >> lint_report.txt
          fi
        id: debug-checkout

      - name: Initialize Repository
        if: steps.debug-checkout.outputs.git_available == 'true'
        run: |
          echo "Checking repository state..." >> lint_report.txt
          if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            echo "Error: Not a Git repository" >> lint_report.txt
            echo "git_available=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          if [ ! -f "$(git rev-parse --git-dir)/HEAD" ]; then
            echo "Repository is empty, initializing..." >> lint_report.txt
            git commit --allow-empty -m "Initial empty commit" || {
              echo "Error: Failed to create initial commit" >> lint_report.txt
              echo "git_available=false" >> $GITHUB_OUTPUT
              exit 0
            }
          fi
          git fetch origin || {
            echo "Error: Failed to fetch from origin" >> lint_report.txt
            echo "git_available=false" >> $GITHUB_OUTPUT
            exit 0
          }
        id: init-repo

      - name: Debug Git Configuration
        if: steps.debug-checkout.outputs.git_available == 'true'
        run: |
          echo "Git configuration:" >> lint_report.txt
          git config --list >> lint_report.txt
          echo "Remote details:" >> lint_report.txt
          git remote -v >> lint_report.txt
          echo "Current branch:" >> lint_report.txt
          git branch --show-current >> lint_report.txt
          echo "Repository state:" >> lint_report.txt
          git status >> lint_report.txt
          echo "Environment variables:" >> lint_report.txt
          env | sort >> lint_report.txt

      - name: Check Dependency Files
        if: steps.debug-checkout.outputs.git_available == 'true'
        run: |
          echo "Checking for dependency files..." >> lint_report.txt
          if [ -f pyproject.toml ]; then
            echo "Found pyproject.toml" >> lint_report.txt
          else
            echo "pyproject.toml not found" >> lint_report.txt
          fi
          if [ -f requirements.txt ]; then
            echo "Found requirements.txt" >> lint_report.txt
          else
            echo "requirements.txt not found" >> lint_report.txt
          fi

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install Dependencies
        run: |
          echo "Installing dependencies..." >> lint_report.txt
          python -m pip install --upgrade pip
          pip install ruff mypy
          if [ -f pyproject.toml ]; then
            echo "Found pyproject.toml, installing..." >> lint_report.txt
            pip install . >> lint_report.txt 2>&1 || echo "Warning: Failed to install from pyproject.toml" >> lint_report.txt
          elif [ -f requirements.txt ]; then
            echo "Found requirements.txt, installing..." >> lint_report.txt
            pip install -r requirements.txt >> lint_report.txt 2>&1 || echo "Warning: Failed to install from requirements.txt" >> lint_report.txt
          else
            echo "Warning: Neither pyproject.toml nor requirements.txt found, proceeding with only ruff and mypy" >> lint_report.txt
          fi

      - name: Validate Inputs
        run: |
          echo "Validating inputs..." >> lint_report.txt
          FILE_PATTERN="${{ inputs.file_pattern }}"
          if [[ ! "$FILE_PATTERN" =~ \.py$ ]] || [[ "$FILE_PATTERN" =~ \[.*\] ]] || [[ "$FILE_PATTERN" =~ [[:space:]]or[[:space:]] ]]; then
            echo "Error: file_pattern must target .py files (e.g., '*.py', '**/*.py') and not contain square brackets or 'or'" >> lint_report.txt
            echo "Invalid pattern provided: $FILE_PATTERN" >> lint_report.txt
            exit 1
          fi
          if [ ! -d "${{ inputs.base_directory }}" ]; then
            echo "Error: Base directory '${{ inputs.base_directory }}' does not exist" >> lint_report.txt
            exit 1
          fi

      - name: List Repository Files
        if: steps.debug-checkout.outputs.git_available == 'true'
        run: |
          echo "Repository contents:" >> lint_report.txt
          find . -type f >> lint_report.txt

      - name: Check Python Files
        run: |
          echo "Checking for Python files..." >> lint_report.txt
          find "${{ inputs.base_directory }}" -type f -path "${{ inputs.file_pattern }}" | tee -a lint_report.txt
          if [ -s lint_report.txt ]; then
            echo "Python files found" >> lint_report.txt
          else
            echo "Warning: No Python files found in ${{ inputs.base_directory }} with pattern ${{ inputs.file_pattern }}" >> lint_report.txt
          fi

      - name: List Matched Python Files
        run: |
          echo "Matched files for pattern ${{ inputs.file_pattern }} in directory ${{ inputs.base_directory }}:" >> lint_report.txt
          find "${{ inputs.base_directory }}" -type f -path "${{ inputs.file_pattern }}" | tee -a lint_report.txt
          if ! grep -q "[^[:space:]]" lint_report.txt; then
            echo "Warning: No Python files matched the pattern ${{ inputs.file_pattern }} in directory ${{ inputs.base_directory }}" >> lint_report.txt
          fi

      - name: Run Ruff Linting
        run: |
          echo "Running Ruff linting..." >> lint_report.txt
          ruff check "${{ inputs.base_directory }}/${{ inputs.file_pattern }}" --output-format=full >> lint_report.txt 2>&1 || {
            echo "Ruff linting found issues, but continuing to formatting" >> lint_report.txt
          }

      - name: Run Ruff Formatting
        run: |
          echo "Running Ruff formatting..." >> lint_report.txt
          ruff format "${{ inputs.base_directory }}/${{ inputs.file_pattern }}" >> lint_report.txt 2>&1 || {
            echo "Error: Ruff formatting failed" >> lint_report.txt
            exit 1
          }

      - name: Run Mypy Type Checking
        run: |
          echo "Running Mypy type checking..." >> lint_report.txt
          mypy "${{ inputs.base_directory }}/${{ inputs.file_pattern }}" >> lint_report.txt 2>&1 || {
            echo "Mypy found type issues, but continuing" >> lint_report.txt
          }

      - name: Debug Git Status
        if: steps.debug-checkout.outputs.git_available == 'true'
        run: |
          echo "Git status after processing:" >> lint_report.txt
          git status >> lint_report.txt
          echo "Staged changes:" >> lint_report.txt
          git diff --cached || echo "No staged changes" >> lint_report.txt

      - name: Check for Changes
        if: steps.debug-checkout.outputs.git_available == 'true'
        id: git_status
        run: |
          git add .
          if ! git diff --cached --quiet; then
            echo "Changes detected" >> lint_report.txt
            echo "changes_made=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected" >> lint_report.txt
            echo "changes_made=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure Git
        if: steps.debug-checkout.outputs.git_available == 'true' && steps.git_status.outputs.changes_made == 'true'
        run: |
          echo "Configuring Git..." >> lint_report.txt
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create New Branch and Commit Changes
        if: steps.debug-checkout.outputs.git_available == 'true' && steps.git_status.outputs.changes_made == 'true'
        id: commit-changes
        run: |
          BRANCH_NAME="lint-format-$(date +%Y%m%d-%H%M%S)-${{ github.run_id }}"
          echo "Creating branch: $BRANCH_NAME" >> lint_report.txt
          git checkout -b "$BRANCH_NAME" || {
            echo "Error: Failed to create branch $BRANCH_NAME" >> lint_report.txt
            git status >> lint_report.txt
            exit 1
          }
          git commit -m "${{ inputs.commit_message }}" || {
            echo "Error: Failed to commit changes" >> lint_report.txt
            git status >> lint_report.txt
            exit 1
          }
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Push Changes
        if: steps.debug-checkout.outputs.git_available == 'true' && steps.git_status.outputs.changes_made == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="${{ steps.commit-changes.outputs.branch_name }}"
          echo "Pushing branch $BRANCH_NAME to origin" >> lint_report.txt
          git push https://x-access-token:$GITHUB_TOKEN@github.com/${{ github.repository }} "$BRANCH_NAME" --force-with-lease || {
            echo "Error: Failed to push branch $BRANCH_NAME" >> lint_report.txt
            git status >> lint_report.txt
            git remote -v >> lint_report.txt
            exit 1
          }

      - name: Create Pull Request
        if: steps.debug-checkout.outputs.git_available == 'true' && steps.git_status.outputs.changes_made == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.commit-changes.outputs.branch_name }}
          base: ${{ github.ref_name }}
          title: "Automated Linting and Formatting"
          body: |
            This PR contains automated linting and formatting changes for Python (.py) files using Ruff and Mypy.

            **Details:**
            - Base directory: ${{ inputs.base_directory }}
            - File pattern: ${{ inputs.file_pattern }}
            - Commit message: ${{ inputs.commit_message }}

            Please review the changes and the attached `lint_report.txt` artifact for details.
          labels: |
            linting
            formatting
            automated
          assignees: ${{ github.actor }}
          commit-message: "${{ inputs.commit_message }}"
          delete-branch: true

  upload-artifact:
    runs-on: ubuntu-latest
    needs: [validate-and-init, lint-and-format]
    if: always()
    steps:
      - name: Download Lint Report
        uses: actions/download-artifact@v4
        with:
          name: lint-report
          path: .

      - name: Ensure Lint Report Exists
        run: |
          if [ ! -f lint_report.txt ]; then
            echo "Warning: lint_report.txt not found, creating empty file" >> lint_report.txt
            echo "No linting or formatting data available due to earlier failures" >> lint_report.txt
            touch lint_report.txt
          fi

      - name: Verify Lint Report Contents
        run: |
          echo "Verifying lint_report.txt before upload..." >> lint_report.txt
          echo "File size:" >> lint_report.txt
          ls -lh lint_report.txt >> lint_report.txt
          echo "Contents preview:" >> lint_report.txt
          head -n 20 lint_report.txt >> lint_report.txt

      - name: Upload Lint Report
        uses: actions/upload-artifact@v4
        with:
          name: lint-report
          path: lint_report.txt
          retention-days: 7
          if-no-files-found: warn
        continue-on-error: true
        id: upload-artifact

      - name: Log Upload Result
        run: |
          if [ "${{ steps.upload-artifact.outcome }}" != "success" ]; then
            echo "Warning: Failed to upload lint_report.txt" >> lint_report.txt
          else
            echo "Successfully uploaded lint_report.txt" >> lint_report.txt
          fi
