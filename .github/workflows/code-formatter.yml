name: Code Formatter and Fixer Workflow
on:
  workflow_dispatch:
    inputs:
      api-key:
        description: 'Gemini API Key (leave blank to use repository secret)'
        required: false
      max-api-calls:
        description: 'Maximum API calls per minute (1-60)'
        required: false
        default: '59'
      file-pattern:
        description: 'File pattern to format and fix (must be "*.py" or subpath, e.g., "src/*.py")'
        required: false
        default: '**/*.py'

jobs:
  format-and-fix:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List Repository Files
        run: |
          echo "Repository contents:"
          find . -type f

      - name: List Matched Python Files
        run: |
          echo "Matched files for pattern ${{ github.event.inputs.file-pattern }}:"
          find . -type f -path "${{ github.event.inputs.file-pattern }}"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai

      - name: Validate Inputs
        run: |
          MAX_CALLS="${{ github.event.inputs.max-api-calls }}"
          if ! [[ "$MAX_CALLS" =~ ^[0-9]+$ ]] || [ "$MAX_CALLS" -lt 1 ] || [ "$MAX_CALLS" -gt 60 ]; then
            echo "Error: max-api-calls must be a number between 1 and 60"
            exit 1
          fi
          if [ -z "${{ github.event.inputs.api-key || secrets.GEMINI_API_KEY }}" ]; then
            echo "Error: API key not provided and GEMINI_API_KEY secret not set"
            exit 1
          fi
          FILE_PATTERN="${{ github.event.inputs.file-pattern }}"
          if [[ ! "$FILE_PATTERN" =~ \.py$ ]]; then
            echo "Error: file-pattern must target .py files (e.g., '*.py', 'src/*.py')"
            exit 1
          fi

      - name: Ensure Formatter Script
        run: |
          if [ ! -f xfix_format.py ]; then
            echo "Error: xfix_format.py not found in repository root"
            exit 1
          fi
          chmod +x xfix_format.py

      - name: Format and Fix Code
        env:
          GOOGLE_API_KEY: ${{ github.event.inputs.api-key || secrets.GEMINI_API_KEY }}
          MAX_API_CALLS: ${{ github.event.inputs.max-api-calls }}
          FILE_PATTERN: ${{ github.event.inputs.file-pattern }}
        run: |
          ./xfix_format.py "$(pwd)" "$FILE_PATTERN" > format_log.txt 2>&1 || {
            echo "Formatter script failed:"
            cat format_log.txt || echo "No log generated"
            exit 1
          }

      - name: Ensure Format Log Exists
        run: |
          if [ ! -f format_log.txt ]; then
            echo "No format log generated, creating empty log" > format_log.txt
          fi

      - name: Check for Modified Files
        id: check-changes
        run: |
          git add .
          if ! git diff --cached --quiet; then
            echo "Files modified by formatter script"
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "No files modified"
            if [ -s format_log.txt ]; then
              echo "Error: Format log contains content but no files were modified"
              cat format_log.txt
              exit 1
            fi
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Create New Branch and Commit Changes
        if: steps.check-changes.outputs.changes_detected == 'true'
        id: commit-changes
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          BRANCH_NAME="format-$(date +%s)"
          git checkout -b "$BRANCH_NAME"
          git commit -m "Apply formatting and fixes to Python files"
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Push Branch
        if: steps.check-changes.outputs.changes_detected == 'true'
        run: |
          git push origin ${{ steps.commit-changes.outputs.branch_name }}

      - name: Create Pull Request
        if: steps.check-changes.outputs.changes_detected == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.commit-changes.outputs.branch_name }}
          title: "Formatted and Fixed Python Files"
          body: |
            This PR applies formatting (PEP 8) and fixes common issues in Python (.py) files using the Gemini API. 
            Please review the changes and the attached `format_log.txt` artifact for details.
          commit-message: "Apply formatting and fixes to Python files"
          delete-branch: true

      - name: Upload Format Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: format-log
          path: format_log.txt
          retention-days: 7
