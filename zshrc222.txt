# ==============================================================================
# Zsh Configuration - Enhanced Version 2.5.0
# Target: Termux with Oh My Zsh, Powerlevel10k, and aichat integration
# Last Updated: 2025-04-03 (Based on original date, reflects enhancement date)
# ==============================================================================

# ------------------------------------------------------------------------------
# Powerlevel10k Instant Prompt (MUST BE AT THE VERY TOP)
# ------------------------------------------------------------------------------
# Enables faster shell startup by caching the prompt.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# ==============================================================================
# Core Environment & Paths
# ==============================================================================

# Set terminal type for compatibility and color support
export TERM="xterm-256color"

# Set preferred language and locale
export LANG="en_US.UTF-8"

# Define the default shell
export SHELL="$(command -v zsh)"

# Oh My Zsh installation directory
export ZSH="$HOME/.oh-my-zsh"

# Location of this configuration file (primarily for reference)
ZSHRC="$HOME/.zshrc"

# System PATH configuration
# Prioritize user binaries, then Termux, then system defaults
export PATH="$HOME/bin:$HOME/.local/bin:/data/data/com.termux/files/usr/bin:$PATH"
# Add Rust (Cargo) binaries to PATH
export PATH="$HOME/.cargo/bin:$PATH"

# Preferred text editors
export EDITOR="nano"
export VISUAL="$EDITOR"

# Python path (Adjust if your Python installation differs)
export PYTHONPATH="/data/data/com.termux/files/usr/bin/python"

# Configuration directory for aichat
export AICHA_CONFIG="$HOME/.config/aichat"

# ==============================================================================
# Shell Options (setopt)
# ==============================================================================

# --- Navigation & Interaction ---
setopt AUTO_CD              # Change directory without typing 'cd'
setopt AUTO_PUSHD           # Maintain a directory stack for 'cd -<TAB>'
setopt PUSHD_IGNORE_DUPS    # Don't push duplicate directories onto the stack
setopt INTERACTIVE_COMMENTS # Allow comments in interactive shell

# --- Globbing (Filename Generation) ---
setopt EXTENDED_GLOB        # Use extended globbing features (#, ~, ^)
setopt NUMERIC_GLOB_SORT    # Sort filenames numerically when globbing
setopt GLOB_DOTS            # Include dotfiles in globbing results unless explicitly excluded

# --- History ---
setopt SHARE_HISTORY        # Share history between concurrent shells
setopt INC_APPEND_HISTORY   # Append commands to history immediately
setopt HIST_IGNORE_DUPS     # Don't record duplicate consecutive commands
setopt HIST_IGNORE_SPACE    # Don't record commands starting with a space
setopt HIST_VERIFY          # Show history substitution before executing
setopt HIST_REDUCE_BLANKS   # Remove superfluous blanks from history entries

# --- Correction ---
setopt CORRECT              # Enable command auto-correction suggestion

# ==============================================================================
# History Configuration
# ==============================================================================

export HISTFILE="$HOME/.zsh_history"  # Where to store history
export HISTSIZE=50000                 # Max history lines kept in memory
export SAVEHIST=50000                 # Max history lines saved to file
# Note: HIST_IGNORE_SPACE and HIST_IGNORE_DUPS handled by setopt above.
# HIST_NO_STORE is used by some frameworks/plugins to ignore commands entirely.
export HIST_NO_STORE="ls:cd:pwd:exit:history:bg:fg:jobs:clear"

# ==============================================================================
# Theme Configuration (Powerlevel10k)
# ==============================================================================

# Define Powerlevel10k theme directory and file path
THEME_DIR="${ZSH_CUSTOM:-$ZSH/custom}/themes/powerlevel10k"
THEME_FILE="$THEME_DIR/powerlevel10k.zsh-theme"

# Check if Powerlevel10k theme exists and set it up
if [[ -d "$THEME_DIR" && -f "$THEME_FILE" ]]; then
  ZSH_THEME="powerlevel10k/powerlevel10k"

  # Powerlevel10k Specific Settings (Customize as needed)
  # Requires a Nerd Font installed and configured in Termux.
  POWERLEVEL10K_MODE='nerdfont-complete'

  # Elements displayed on the left prompt
  POWERLEVEL10K_LEFT_PROMPT_ELEMENTS=(
    # os_icon               # Optional: OS icon
    context               # User@Host information
    dir                   # Current directory
    vcs                   # Version control system status (Git)
    # command_execution_time # Optional: Execution time of the last command
    time                  # Current time
  )

  # Elements displayed on the right prompt
  POWERLEVEL10K_RIGHT_PROMPT_ELEMENTS=(
    status                # Exit status of the last command
    command_execution_time # Execution time of the last command
    # ram                   # Optional: RAM usage
    # background_jobs       # Optional: Indicator for background jobs
    # virtualenv            # Optional: Python virtual environment
  )

  # Appearance settings
  POWERLEVEL10K_PROMPT_ON_NEWLINE=true     # Show prompt on a new line
  POWERLEVEL10K_MULTILINE_NEWLINE=true     # Separate prompt elements with newlines if needed
  # POWERLEVEL10K_PROMPT_ADD_NEWLINE=true  # Add an extra newline before the prompt

  # Source the theme file AFTER setting P10k variables
  # source "$THEME_FILE" # This is usually handled by Oh My Zsh when ZSH_THEME is set

else
  # Fallback theme if Powerlevel10k is not found
  ZSH_THEME="agnoster" # Or choose another built-in theme
  echo "WARNING: Powerlevel10k theme not found at '$THEME_DIR'." >&2
  echo "Falling back to '$ZSH_THEME' theme." >&2
  echo "Install P10k: git clone --depth=1 https://github.com/romkatv/powerlevel10k.git \"$THEME_DIR\"" >&2
  # Termux-specific notification
  if command -v termux-toast >/dev/null 2>&1; then
    termux-toast "Powerlevel10k not found. Install for enhanced prompt."
  fi
fi

# ==============================================================================
# Oh My Zsh Plugin Configuration
# ==============================================================================

plugins=(
  git                       # Git aliases and functions
  zsh-autosuggestions       # Fish-like command suggestions
  zsh-completions           # Additional Zsh completion definitions
  fzf-tab                   # Replace Zsh's default completion selection menu with fzf
  zsh-autopair              # Auto-close brackets, quotes, etc.
  alias-tips                # Suggests aliases for commands you type often
  fast-syntax-highlighting  # Optimized syntax highlighting
  aichat                    # Custom plugin for aichat integration (if exists in custom/plugins)
  # Add other plugins here, e.g., docker, python, node, etc.
)

# Source Oh My Zsh initialization script
# This will load theme, plugins, and core functionalities.
# Redirect stderr to /dev/null to suppress potential non-critical warnings during load.
if [[ -f "$ZSH/oh-my-zsh.sh" ]]; then
  source "$ZSH/oh-my-zsh.sh" # 2>/dev/null
else
  echo "ERROR: Oh My Zsh installation not found at '$ZSH'." >&2
  echo "Please install Oh My Zsh." >&2
  echo "Install command: sh -c \"\$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"" >&2
  if command -v termux-toast >/dev/null 2>&1; then
    termux-toast -s "Error: Oh My Zsh not found. Please install."
  fi
  # Exit or take other action if OMZ is critical? For now, just warn.
fi

# ==============================================================================
# aichat Integration (Requires `aichat` installed via `cargo install aichat`)
# ==============================================================================

# Check for aichat installation only if attempting to use it.
_check_aichat_installed() {
  if ! command -v aichat >/dev/null 2>&1; then
    echo "ERROR: 'aichat' command not found." >&2
    echo "Install with Rust: cargo install aichat" >&2
    if command -v termux-toast >/dev/null 2>&1; then
      termux-toast -s "aichat not installed. Run 'cargo install aichat'."
    fi
    return 1 # Indicate failure
  fi
  return 0 # Indicate success
}

# ZLE widget function to get AI suggestions for the current command buffer
_aichat_zsh_suggest() {
  local current_buffer="$BUFFER"
  if [[ -z "$current_buffer" ]]; then
    zle send-break # Abort if buffer is empty
    echo "AIChat Suggest: Type a command first (Alt+E)."
    return 1
  fi

  if ! _check_aichat_installed; then
    zle send-break # Abort if aichat not installed
    return 1
  fi

  echo -n "ðŸ§  Thinking... " # Provide feedback
  # Use --max-output-tokens instead of --max-length if available and preferred
  local suggestion
  suggestion=$(aichat suggest "$current_buffer" --max-output-tokens 150 2>/dev/null) # Use a reasonable token limit

  # Check if suggestion was successful
  if [[ $? -ne 0 || -z "$suggestion" ]]; then
    echo "Error getting suggestion from aichat."
    zle send-break # Abort on error
    return 1
  fi

  # Clear the "Thinking..." message and replace buffer with suggestion
  echo -ne "\r\033[K" # Move cursor to beginning of line, clear line
  BUFFER="$suggestion"
  zle end-of-line # Move cursor to the end of the suggestion
  # Consider using zle insert instead of replacing BUFFER if preferred:
  # BUFFER=""
  # zle insert "$suggestion"
}

# Register the widget
zle -N _aichat_zsh_suggest

# Bind Alt+E to the widget
# Note: Your terminal might map Alt+E differently. Check with `showkey -a`.
# Common alternatives: `\ee`, `\eE`
bindkey '^[e' _aichat_zsh_suggest

# ==============================================================================
# Aliases
# ==============================================================================

# --- Safety ---
alias rm='rm -i'              # Prompt before removal
alias cp='cp -i'              # Prompt before overwriting
alias mv='mv -i'              # Prompt before overwriting

# --- Navigation ---
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias ls='ls --color=auto'    # Basic colorized ls
alias l='ls -CF'              # List in columns, marking type
alias ll='ls -lh'             # Long listing, human-readable sizes
alias la='ls -lah'            # Long listing, human-readable, show hidden
alias grep='grep --color=auto'
alias mkdir='mkdir -p'        # Create parent directories as needed

# --- Enhanced Tools (if installed) ---
# Use bat instead of cat (syntax highlighting)
if command -v bat >/dev/null 2>&1; then
  alias cat='bat --theme=Dracula' # Use a specific theme if desired
fi

# Use eza instead of ls (modern replacement with icons, git integration)
if command -v eza >/dev/null 2>&1; then
  alias ls='eza --group-directories-first --icons' # Base eza command
  alias ll='eza -lh --git --icons'                  # Long format, git status, icons
  alias la='eza -lah --git --icons'                 # Include hidden files
  alias lt='eza -T --level=2 --icons'               # Tree view (depth 2)
  alias l.='eza -d .* --icons'                     # List dotfiles only
fi

# Use fd instead of find (simpler syntax, faster)
if command -v fd >/dev/null 2>&1; then
  alias find='fd'
fi

# --- System & Utility ---
alias df='df -h'              # Human-readable disk free space
alias du='du -h --max-depth=1' # Human-readable directory usage (current dir)
alias please='sudo'           # For fun/convenience
alias cls='clear'             # Common alias for clear screen

# --- Git ---
alias g='git'
alias gs='git status -sb'     # Short branch status
alias ga='git add'
alias gaa='git add .'
alias gc='git commit -m'
alias gca='git commit -am'
alias gp='git push'
alias gpf='git push --force-with-lease' # Safer force push
alias gl='git log --oneline --graph --decorate' # Pretty log
alias gd='git diff'
alias gdc='git diff --cached'
alias gco='git checkout'
alias gb='git branch'

# --- Termux Specific (Optional) ---
# alias update='pkg update && pkg upgrade -y'
# alias install='pkg install'
# alias uninstall='pkg uninstall'
# alias search='pkg search'

# ==============================================================================
# Custom Functions
# ==============================================================================

# Generate a random password
gen_password() {
  local length=${1:-16} # Default length 16, or use first argument
  # Ensure we have pwgen or use fallback
  if command -v pwgen >/dev/null 2>&1; then
    pwgen -s "$length" 1
  else
    # Fallback using /dev/urandom (less secure for special chars distribution)
    LC_ALL=C tr -dc 'A-Za-z0-9!@#$%^&*()_+-=' < /dev/urandom | head -c "$length" ; echo
  fi
}

# Find large files (default: >100MB in current directory and below)
find_large_files() {
  local size_limit=${1:-"100M"} # Default size 100MB, or use first argument
  local search_path=${2:-.}      # Default path '.', or use second argument
  echo "Searching for files larger than $size_limit in '$search_path'..."
  # Use fd if available, otherwise use find
  if command -v fd >/dev/null 2>&1; then
    fd --type f --size "+$size_limit" --exec ls -lh {} \; "$search_path" 2>/dev/null
  else
    find "$search_path" -type f -size "+$size_limit" -exec ls -lh {} \; 2>/dev/null
  fi
  # Suppress "Permission denied" errors from find
}

# Update Termux packages
update_all() {
  if command -v pkg >/dev/null 2>&1; then
    pkg update && pkg upgrade -y
  else
    echo "Termux 'pkg' command not found. Cannot update." >&2
    return 1
  fi
}

# Show system information (Termux-aware)
system_info() {
  if command -v termux-info >/dev/null 2>&1; then
    termux-info
  else
    echo "--- System ---"
    uname -a
    echo "--- Zsh Version ---"
    zsh --version
    # Add other info if needed (e.g., memory, uptime)
    command -v free >/dev/null 2>&1 && free -h
    command -v uptime >/dev/null 2>&1 && uptime
  fi
}

# Search command history using grep
history_search() {
  if [[ $# -eq 0 ]]; then
    echo "Usage: history_search <pattern>" >&2
    return 1
  fi
  fc -l 1 | grep --color=auto "$@"
}

# Extract common archive types
extract() {
  if [[ -z "$1" ]]; then
    echo "Usage: extract <filename>" >&2
    return 1
  fi
  if [[ ! -f "$1" ]]; then
    echo "Error: File '$1' not found." >&2
    return 1
  fi

  local filename="$1"
  case "$filename" in
    *.tar.bz2|*.tbz2) tar xvjf "$filename" ;;
    *.tar.gz|*.tgz)   tar xvzf "$filename" ;;
    *.tar.xz|*.txz)   tar xvJf "$filename" ;; # Needs xz utils
    *.bz2)            bunzip2 "$filename" ;;
    *.rar)            unrar x "$filename" ;;   # Needs unrar
    *.gz)             gunzip "$filename" ;;
    *.tar)            tar xvf "$filename" ;;
    *.zip)            unzip "$filename" ;;
    *.Z)              uncompress "$filename" ;;
    *.7z)             7z x "$filename" ;;      # Needs p7zip
    *)                echo "Error: Don't know how to extract '$filename'" >&2; return 1 ;;
  esac
  echo "Extracted '$filename'."
}


# (Original ai_summarize function removed as aichat functionality is now focused on command suggestion)
# If you still need summarization, you can adapt the aichat call within a function.

# ==============================================================================
# Completion System Configuration
# ==============================================================================

# Initialize the Zsh completion system
# -i: Allow insecure directories (use with caution, needed if completions are in non-root owned dirs)
# -C: Check cache validity
# -u: Use user-secure directories only (safer alternative if permissions allow)
autoload -Uz compinit && compinit -i

# Cache completion results for faster performance
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path "$HOME/.zsh_cache" # Ensure this dir exists or is created

# Enable menu selection for completions
zstyle ':completion:*' menu select

# Fuzzy matching for completions (case-insensitive)
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'

# Group completions by type
zstyle ':completion:*' group-name ''

# Verbose completion messages (optional)
# zstyle ':completion:*' verbose yes
# zstyle ':completion:*:descriptions' format '%B%d%b'
# zstyle ':completion:*:messages' format '%d'
# zstyle ':completion:*:warnings' format 'No matches for: %d'
# zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'

# ==============================================================================
# Keybindings (zle)
# ==============================================================================

# Standard navigation bindings (often default, but ensures consistency)
bindkey '^[[H' beginning-of-line  # Home key
bindkey '^[[F' end-of-line      # End key
bindkey '^[[3~' delete-char      # Delete key
bindkey '^?' backward-delete-char # Backspace

# History search
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward # Might conflict, use with caution

# Clear screen
bindkey '^L' clear-screen

# Word movement (adjust based on terminal emulator if needed)
# bindkey '^[[1;5C' forward-word  # Ctrl+Right Arrow
# bindkey '^[[1;5D' backward-word # Ctrl+Left Arrow
# bindkey '\e\e[C' forward-word   # Alt+Right Arrow (alternative)
# bindkey '\e\e[D' backward-word  # Alt+Left Arrow (alternative)

# fzf keybindings (if fzf installed, often configured by fzf setup)
# Example: Ctrl+T for files, Ctrl+R for history, Alt+C for directories

# ==============================================================================
# Load Custom User Configurations
# ==============================================================================
# Source any .zsh files found in ~/.config/zsh/
ZSH_CUSTOM_DIR="$HOME/.config/zsh"
if [[ -d "$ZSH_CUSTOM_DIR" ]]; then
  for config_file in "$ZSH_CUSTOM_DIR"/*.zsh; do
    if [[ -f "$config_file" && -r "$config_file" ]]; then
      source "$config_file"
    fi
  done
  unset config_file # Clean up loop variable
fi
unset ZSH_CUSTOM_DIR # Clean up temp variable

# ==============================================================================
# Final Setup & Powerlevel10k User Config
# ==============================================================================

# Source the user-specific Powerlevel10k configuration file if it exists.
# This file is typically created by running `p10k configure`.
# It should be sourced *after* Oh My Zsh and the P10k theme setup.
if [[ -f "$HOME/.p10k.zsh" ]]; then
  source "$HOME/.p10k.zsh"
fi

# Confirmation message
echo "Enhanced Zsh config loaded successfully - $(date '+%Y-%m-%d %H:%M:%S')"

# ==============================================================================
# End of Zsh Configuration
# ==============================================================================
