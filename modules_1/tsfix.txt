import logging
# import time # Can be removed if only used for time.monotonic() or replaced by asyncio for sleeps
import asyncio # <<< ADDED
from decimal import Decimal, ROUND_DOWN, ROUND_UP, InvalidOperation
from typing import Any, Dict, Optional
import sys

# ... (other imports remain the same, ensure exchange_api functions are imported correctly)
# from exchange_api import (fetch_balance, fetch_current_price_ccxt, # etc.
#                           place_trade, get_open_position, # etc.
#                           _set_position_protection, set_trailing_stop_loss) # etc.

# ... (helper functions like _format_signal remain synchronous)

async def _execute_close_position( # <<< CHANGED to async
    exchange: ccxt.Exchange, symbol: str, market_info: Dict[str, Any],
    open_position: Dict[str, Any], logger: logging.Logger, reason: str = "exit signal"
) -> bool:
    # ...
    # Inside _execute_close_position:
    close_order = await place_trade( # <<< CHANGED to await
        exchange=exchange, symbol=symbol, trade_signal=close_side_signal,
        position_size=pos_size, market_info=market_info, logger=lg,
        order_type='market', reduce_only=True
    )
    # ...
    return True # or False based on logic


async def analyze_and_trade_symbol( # <<< CHANGED to async
    exchange: ccxt.Exchange, symbol: str, config: Dict[str, Any],
    logger: logging.Logger, enable_trading: bool
) -> None:
    lg = logger
    # cycle_start_time = time.monotonic() # time.monotonic() is fine here
    cycle_start_time = asyncio.get_event_loop().time() # Alternative for async contexts

    market_info = await get_market_info(exchange, symbol, lg) # <<< AWAITED
    # ...
    klines_df = await fetch_klines_ccxt(exchange, symbol, ccxt_interval, limit=kline_limit, logger=lg) # <<< AWAITED
    # ...
    current_price_fetch = await fetch_current_price_ccxt(exchange, symbol, lg) # <<< AWAITED
    # ...
    if config.get("indicators",{}).get("orderbook", False) and Decimal(str(active_weights.get("orderbook", "0"))) != 0:
         orderbook_data = await fetch_orderbook_ccxt(exchange, symbol, config.get("orderbook_limit", 100), lg) # <<< AWAITED
    # ...

    if not enable_trading:
        # lg.info(f"{NEON_BLUE}---== Analysis Cycle End ({symbol}, {time.monotonic() - cycle_start_time:.2f}s) ==---{RESET}\n")
        lg.info(f"{NEON_BLUE}---== Analysis Cycle End ({symbol}, {asyncio.get_event_loop().time() - cycle_start_time:.2f}s) ==---{RESET}\n")
        return

    open_position = await get_open_position(exchange, symbol, market_info, lg) # <<< AWAITED

    # --- Scenario 1: No Open Position ---
    if open_position is None:
        if signal in ["BUY", "SELL"]:
            # ...
            balance = await fetch_balance(exchange, config.get("quote_currency", "USDT"), lg) # <<< AWAITED
            # ...
            if not market_info.get('spot', True) :
                lev = int(config.get("leverage", 1))
                if lev > 0:
                    if not await set_leverage_ccxt(exchange, symbol, lev, market_info, lg): # <<< AWAITED
                         # ...
            # ...
            trade_order = await place_trade(exchange,symbol,signal,pos_size_dec,market_info,lg,entry_type,limit_px,False) # <<< AWAITED

            if trade_order and trade_order.get('id'):
                # ...
                if entry_type == 'market' or (entry_type == 'limit' and order_status == 'closed'):
                    confirm_delay = config.get("position_confirm_delay_seconds", POSITION_CONFIRM_DELAY_SECONDS)
                    lg.info(f"Waiting {confirm_delay}s for position confirmation ({symbol})...")
                    await asyncio.sleep(confirm_delay) # <<< CHANGED to asyncio.sleep
                    confirmed_pos = await get_open_position(exchange, symbol, market_info, lg) # <<< AWAITED

                    if confirmed_pos:
                        # ...
                            if tsl_enabled_config:
                                 prot_ok = await set_trailing_stop_loss(exchange,symbol,market_info,confirmed_pos,config,lg,tp_f) # <<< AWAITED
                            elif (sl_f and isinstance(sl_f, Decimal) and sl_f > 0) or \
                                 (tp_f and isinstance(tp_f, Decimal) and tp_f > 0):
                                 prot_ok = await _set_position_protection(exchange,symbol,market_info,confirmed_pos,lg,sl_f,tp_f) # <<< AWAITED
                        # ...
    else: # --- Scenario 2: Existing Open Position ---
        # ...
        if (pos_side == 'long' and signal == "SELL") or (pos_side == 'short' and signal == "BUY"):
            # ...
            await _execute_close_position(exchange, symbol, market_info, open_position, lg, "opposing signal"); return # <<< AWAITED
        # ...
        if isinstance(time_exit_minutes_config, (int, float)) and time_exit_minutes_config > 0:
            if pos_ts_ms and isinstance(pos_ts_ms, int):
                try:
                    # elapsed_min = (int(time.time()*1000) - pos_ts_ms) / 60000.0 # time.time() is okay but asyncio.get_event_loop().time() is alternative
                    current_loop_time_ms = int(asyncio.get_event_loop().time() * 1000)
                    elapsed_min = (current_loop_time_ms - pos_ts_ms) / 60000.0
                    # ...
                    if elapsed_min >= time_exit_minutes_config:
                        # ...
                        await _execute_close_position(exchange, symbol, market_info, open_position, lg, "time-based exit"); return # <<< AWAITED
                # ...                                                          # ...
                                if upd_be_sl:
                                    # ...                                                                  if await _set_position_protection(exchange,symbol,market_info,open_position,lg,be_px,cur_tp_dec): # <<< AWAITED
                                        # ...
        # ...
        if tsl_enabled_config and not is_tsl_exch_active:
            # ...
            if await set_trailing_stop_loss(exchange, symbol, market_info, open_position, config, lg, tsl_tp_target): # <<< AWAITED
                # ...
        # ...
    # lg.info(f"{NEON_BLUE}---== Analysis Cycle End ({symbol}, {time.monotonic() - cycle_start_time:.2f}s) ==---{RESET}\n")
    lg.info(f"{NEON_BLUE}---== Analysis Cycle End ({symbol}, {asyncio.get_event_loop().time() - cycle_start_time:.2f}s) ==---{RESET}\n")

# File: trading_strategy.py
import logging
import time
from decimal import Decimal, ROUND_DOWN, ROUND_UP, InvalidOperation
from typing import Any, Dict, Optional
import sys 

import ccxt
import pandas as pd

try:
    from analysis import TradingAnalyzer
    from exchange_api import (fetch_balance, fetch_current_price_ccxt,
                            fetch_klines_ccxt, fetch_orderbook_ccxt,
                            get_market_info, get_open_position, place_trade,
                            set_leverage_ccxt, set_trailing_stop_loss,
                            _set_position_protection) # _set_position_protection is for fixed SL/TP
    from risk_manager import calculate_position_size
    from utils import (CCXT_INTERVAL_MAP, POSITION_CONFIRM_DELAY_SECONDS,
                       get_min_tick_size, get_price_precision,
                       DEFAULT_INDICATOR_PERIODS, 
                       NEON_GREEN, NEON_PURPLE, NEON_RED, NEON_YELLOW, RESET, NEON_BLUE, NEON_CYAN) 
except ImportError as e:
    # Fallback colors if utils fails to import NEON constants
    _NEON_RED = "\033[1;91m" if 'NEON_RED' not in globals() else NEON_RED
    _RESET = "\033[0m" if 'RESET' not in globals() else RESET
    print(f"{_NEON_RED}CRITICAL ERROR: Failed to import required modules in trading_strategy.py: {e}{_RESET}", file=sys.stderr)
    # traceback might not be imported if sys failed earlier, so try importing it here for this specific case
    if 'traceback' not in globals(): import traceback
    traceback.print_exc(file=sys.stderr) 
    raise
except Exception as e:
     _NEON_RED = "\033[1;91m" if 'NEON_RED' not in globals() else NEON_RED
     _RESET = "\033[0m" if 'RESET' not in globals() else RESET
     print(f"{_NEON_RED}CRITICAL ERROR: An unexpected error occurred during module import in trading_strategy.py: {e}{_RESET}", file=sys.stderr)
     if 'traceback' not in globals(): import traceback
     traceback.print_exc(file=sys.stderr) 
     raise

def _format_signal(signal_text: str) -> str:
    if signal_text == "BUY": return f"{NEON_GREEN}{signal_text}{RESET}"
    if signal_text == "SELL": return f"{NEON_RED}{signal_text}{RESET}"
    if signal_text == "HOLD": return f"{NEON_YELLOW}{signal_text}{RESET}"
    return signal_text

def _format_side(side_text: Optional[str]) -> str:
    if side_text is None: return f"{NEON_YELLOW}UNKNOWN{RESET}"
    side_upper = side_text.upper()
    if side_upper == "LONG": return f"{NEON_GREEN}{side_upper}{RESET}"
    if side_upper == "SHORT": return f"{NEON_RED}{side_upper}{RESET}"
    return side_upper

def _format_price_or_na(price_val: Optional[Decimal], precision_places: int, label: str = "") -> str:
    color = NEON_CYAN
    if price_val and isinstance(price_val, Decimal) and price_val > 0:
        try: return f"{color}{price_val:.{precision_places}f}{RESET}"
        except Exception as e: return f"{NEON_YELLOW}{price_val} (fmt err for {label}: {e}){RESET}"
    elif price_val == Decimal(0) and label: # Explicitly show 0 if it's a valid Decimal(0) for certain fields
        return f"{NEON_YELLOW}0.0{RESET}"
    return f"{NEON_YELLOW}N/A{RESET}"


def _execute_close_position(
    exchange: ccxt.Exchange, symbol: str, market_info: Dict[str, Any],
    open_position: Dict[str, Any], logger: logging.Logger, reason: str = "exit signal" 
) -> bool:
    lg = logger
    pos_side = open_position.get('side') # Expected 'long' or 'short'
    pos_size = open_position.get('contractsDecimal') # Expected Decimal

    if not pos_side or pos_side not in ['long', 'short']:
        lg.error(f"{NEON_RED}Cannot close position for {symbol}: Invalid position side '{pos_side}'.{RESET}")
        return False
    if not isinstance(pos_size, Decimal) or pos_size <= 0:
        lg.warning(f"{NEON_YELLOW}Attempted to close {symbol} ({reason}), but size invalid/zero ({pos_size}). No close order.{RESET}")
        return False

    try:
        close_side_signal = "SELL" if pos_side == 'long' else "BUY"
        amount_precision = market_info.get('amountPrecision', 8) 
        if not (isinstance(amount_precision, int) and amount_precision >= 0): amount_precision = 8

        lg.info(f"{NEON_YELLOW}==> Closing {_format_side(pos_side)} position for {symbol} due to {reason} <==")
        lg.info(f"{NEON_YELLOW}==> Placing {_format_signal(close_side_signal)} MARKET order (reduceOnly=True) | Size: {pos_size:.{amount_precision}f} <==")

        close_order = place_trade(
            exchange=exchange, symbol=symbol, trade_signal=close_side_signal,
            position_size=pos_size, market_info=market_info, logger=lg,
            order_type='market', reduce_only=True 
        )

        if close_order and close_order.get('id'):
            lg.info(f"{NEON_GREEN}Position CLOSE order placed for {symbol}. Order ID: {close_order['id']}{RESET}")
            return True
        else:
            lg.error(f"{NEON_RED}Failed to place CLOSE order for {symbol}. Placement returned None/no ID.{RESET}")
            lg.warning(f"{NEON_RED}Manual check/intervention required for {symbol}!{RESET}")
            return False
    except Exception as close_err:
         lg.error(f"{NEON_RED}Error attempting to close position for {symbol} ({reason}): {close_err}{RESET}", exc_info=True)
         lg.warning(f"{NEON_RED}Manual intervention may be needed for {symbol}!{RESET}")
         return False


def analyze_and_trade_symbol(
    exchange: ccxt.Exchange, symbol: str, config: Dict[str, Any],
    logger: logging.Logger, enable_trading: bool 
) -> None:
    lg = logger 
    lg.info(f"{NEON_BLUE}---== Analyzing {NEON_PURPLE}{symbol}{NEON_BLUE} (Interval: {config.get('interval', 'N/A')}) Cycle Start ==---{RESET}")
    cycle_start_time = time.monotonic()

    market_info = get_market_info(exchange, symbol, lg)
    if not market_info:
        lg.error(f"{NEON_RED}Failed to get market info for {symbol}. Skipping cycle.{RESET}"); return

    interval_config_val = config.get("interval")
    if interval_config_val is None: 
         lg.error(f"{NEON_RED}Interval not specified for {symbol}. Skipping.{RESET}"); return
    interval_str = str(interval_config_val)
    ccxt_interval = CCXT_INTERVAL_MAP.get(interval_str) 
    if not ccxt_interval:
         lg.error(f"{NEON_RED}Invalid interval '{interval_str}' for {symbol}. Skipping.{RESET}"); return

    kline_limit = config.get("kline_limit", 500)
    klines_df = await fetch_klines_ccxt(exchange, symbol, ccxt_interval, limit=kline_limit, logger=lg)
    min_kline_length = config.get("min_kline_length", 50)
    if klines_df is None or klines_df.empty or len(klines_df) < min_kline_length:
        lg.error(f"{NEON_RED}Insufficient kline data for {symbol} (got {len(klines_df) if klines_df is not None else 0}, need {min_kline_length}). Skipping.{RESET}"); return

    current_price_decimal: Optional[Decimal] = None
    try:
        current_price_fetch = fetch_current_price_ccxt(exchange, symbol, lg)
        if current_price_fetch and isinstance(current_price_fetch, Decimal) and current_price_fetch > 0: 
            current_price_decimal = current_price_fetch
        else: 
             lg.warning(f"{NEON_YELLOW}Failed ticker price fetch or invalid price ({current_price_fetch}) for {symbol}. Using last kline close.{RESET}")
             if not klines_df.empty and 'close' in klines_df.columns:
                last_close_val = klines_df['close'].iloc[-1] 
                if isinstance(last_close_val, Decimal) and pd.notna(last_close_val) and last_close_val > 0 : 
                    current_price_decimal = last_close_val
                elif pd.notna(last_close_val): # If not Decimal, try converting
                    try: current_price_decimal = Decimal(str(last_close_val)); assert current_price_decimal > 0
                    except: lg.error(f"{NEON_RED}Last kline close value '{last_close_val}' invalid for {symbol}.{RESET}")
                else: lg.error(f"{NEON_RED}Last kline close value is NaN for {symbol}.{RESET}")
             else: lg.error(f"{NEON_RED}Cannot use last kline close: DataFrame empty or 'close' missing for {symbol}.{RESET}")
    except Exception as e: lg.error(f"{NEON_RED}Error fetching/processing current price for {symbol}: {e}{RESET}", exc_info=True)

    if not (current_price_decimal and isinstance(current_price_decimal, Decimal) and current_price_decimal > 0):
         lg.error(f"{NEON_RED}Cannot get valid current price for {symbol} ({current_price_decimal}). Skipping.{RESET}"); return
    lg.debug(f"Current price for {symbol}: {current_price_decimal}")

    orderbook_data = None
    active_weights = config.get("weight_sets", {}).get(config.get("active_weight_set", "default"), {})
    if config.get("indicators",{}).get("orderbook", False) and Decimal(str(active_weights.get("orderbook", "0"))) != 0:
         orderbook_data = fetch_orderbook_ccxt(exchange, symbol, config.get("orderbook_limit", 100), lg)
         if not orderbook_data: lg.warning(f"{NEON_YELLOW}Failed to fetch orderbook for {symbol}, proceeding without.{RESET}")
    
    analyzer = TradingAnalyzer(klines_df.copy(), lg, config, market_info)
    if not analyzer.indicator_values:
         lg.error(f"{NEON_RED}Indicator calculation failed for {symbol}. Skipping signal generation.{RESET}"); return

    signal = analyzer.generate_trading_signal(current_price_decimal, orderbook_data)
    _, tp_calc, sl_calc = analyzer.calculate_entry_tp_sl(current_price_decimal, signal)

    price_precision = get_price_precision(market_info, lg)
    min_tick_size = get_min_tick_size(market_info, lg) 
    amount_precision = market_info.get('amountPrecision', 8) 
    if not (isinstance(amount_precision, int) and amount_precision >= 0):
        lg.warning(f"Market amountPrecision ('{amount_precision}') invalid. Defaulting to 8.")
        amount_precision = 8
    
    min_qty_raw = market_info.get('limits',{}).get('amount',{}).get('min', '0')
    try:
        min_qty = Decimal(str(min_qty_raw))
        if min_qty < 0: min_qty = Decimal('0'); lg.warning(f"Negative min_qty_raw '{min_qty_raw}' for {symbol}, defaulted to 0.")
    except (InvalidOperation, ValueError, TypeError):
        lg.warning(f"Could not parse min_qty_raw '{min_qty_raw}' for {symbol}. Defaulting to 0.")
        min_qty = Decimal('0') 

    current_atr: Optional[Decimal] = analyzer.indicator_values.get("ATR") 

    lg.info(f"--- {NEON_PURPLE}Analysis Summary ({symbol}){RESET} ---")
    lg.info(f"  Current Price: {NEON_CYAN}{current_price_decimal:.{price_precision}f}{RESET}")
    analyzer_atr_period = analyzer.config.get('atr_period', DEFAULT_INDICATOR_PERIODS.get('atr_period', 14))
    atr_log_str = f"  ATR ({analyzer_atr_period}): {NEON_YELLOW}N/A{RESET}"
    if isinstance(current_atr, Decimal) and pd.notna(current_atr) and current_atr > 0:
        try: atr_log_str = f"  ATR ({analyzer_atr_period}): {NEON_CYAN}{current_atr:.{max(0, price_precision + 2)}f}{RESET}"
        except Exception as fmt_e: atr_log_str = f"  ATR ({analyzer_atr_period}): {NEON_YELLOW}{current_atr} (fmt err: {fmt_e}){RESET}"
    elif current_atr is not None : atr_log_str = f"  ATR ({analyzer_atr_period}): {NEON_YELLOW}{current_atr} (invalid/zero){RESET}"
    lg.info(atr_log_str)
    
    lg.info(f"  Initial SL (sizing): {_format_price_or_na(sl_calc, price_precision, 'SL Calc')}")
    lg.info(f"  Initial TP (target): {_format_price_or_na(tp_calc, price_precision, 'TP Calc')}")
    
    tsl_enabled_config = config.get('enable_trailing_stop', False)
    be_enabled_config = config.get('enable_break_even', False)
    time_exit_minutes_config = config.get('time_based_exit_minutes')

    tsl_conf_str = f"{NEON_GREEN}Enabled{RESET}" if tsl_enabled_config else f"{NEON_RED}Disabled{RESET}"
    be_conf_str = f"{NEON_GREEN}Enabled{RESET}" if be_enabled_config else f"{NEON_RED}Disabled{RESET}"
    time_exit_log_str = f"{time_exit_minutes_config} min" if time_exit_minutes_config and isinstance(time_exit_minutes_config, (int,float)) and time_exit_minutes_config > 0 else "Disabled"
    lg.info(f"  Config: TSL={tsl_conf_str}, BE={be_conf_str}, TimeExit={time_exit_log_str}")
    lg.info(f"  Generated Signal: {_format_signal(signal)}")
    lg.info(f"-----------------------------")

    if not enable_trading:
        lg.debug(f"Trading disabled. Analysis complete for {symbol}.")
        lg.info(f"{NEON_BLUE}---== Analysis Cycle End ({NEON_PURPLE}{symbol}{NEON_BLUE}, {time.monotonic() - cycle_start_time:.2f}s) ==---{RESET}\n")
        return

    open_position = get_open_position(exchange, symbol, market_info, lg)

    # --- Scenario 1: No Open Position ---
    if open_position is None: 
        if signal in ["BUY", "SELL"]:
            lg.info(f"{NEON_PURPLE}*** {_format_signal(signal)} Signal & No Position: Initiating Trade for {symbol} ***{RESET}")

            balance = fetch_balance(exchange, config.get("quote_currency", "USDT"), lg)
            if not (balance and isinstance(balance, Decimal) and balance > 0):
                lg.error(f"{NEON_RED}Trade Aborted ({symbol} {signal}): Invalid balance ({balance}).{RESET}"); return 

            try: risk_pct = Decimal(str(config.get("risk_per_trade", 0.0))); assert Decimal(0) <= risk_pct <= Decimal(1)
            except: lg.error(f"{NEON_RED}Trade Aborted ({symbol} {signal}): Invalid risk_per_trade config.{RESET}"); return
            
            risk_amt = balance * risk_pct
            if not (sl_calc and isinstance(sl_calc, Decimal) and sl_calc > 0):
                 lg.error(f"{NEON_RED}Trade Aborted ({symbol} {signal}): Initial SL invalid ({sl_calc}) for sizing.{RESET}"); return 
            if risk_amt <= 0 and risk_pct > 0 : 
                 lg.warning(f"{NEON_YELLOW}Trade Aborted ({symbol} {signal}): Risk amount non-positive ({risk_amt}). Balance: {balance}, Risk %: {risk_pct}.{RESET}"); return

            if not market_info.get('spot', True) : 
                lev = int(config.get("leverage", 1))
                if lev > 0:
                    if not set_leverage_ccxt(exchange, symbol, lev, market_info, lg):
                         lg.error(f"{NEON_RED}Trade Aborted ({symbol} {signal}): Failed to set leverage {lev}x.{RESET}"); return 
            
            pos_size_dec = calculate_position_size(balance, risk_pct, sl_calc, current_price_decimal, market_info, exchange, lg)
            if not (pos_size_dec and isinstance(pos_size_dec, Decimal) and pos_size_dec > 0):
                lg.error(f"{NEON_RED}Trade Aborted ({symbol} {signal}): Position size calc invalid ({pos_size_dec}).{RESET}"); return 

            try: 
                 quant_factor = Decimal(f'1e-{amount_precision}'); pos_size_dec = pos_size_dec.quantize(quant_factor, ROUND_DOWN)
                 lg.debug(f"Quantized position size for {symbol}: {pos_size_dec:.{amount_precision}f}") 
            except Exception as e: lg.error(f"{NEON_RED}Error quantizing size {pos_size_dec} for {symbol}: {e}{RESET}", exc_info=True); return 

            if min_qty > 0 and pos_size_dec < min_qty: 
                 lg.error(f"{NEON_RED}Trade Aborted ({symbol} {signal}): Size {pos_size_dec} < MinQty {min_qty}.{RESET}"); return

            entry_type = config.get("entry_order_type", "market").lower()
            limit_px: Optional[Decimal] = None
            if entry_type == "limit":
                 if not (min_tick_size and isinstance(min_tick_size, Decimal) and min_tick_size > 0):
                      lg.warning(f"{NEON_YELLOW}Min tick invalid for limit order {symbol}. Switching to Market.{RESET}"); entry_type = "market"
                 else:
                     try: 
                         offset_key = f"limit_order_offset_{signal.lower()}" 
                         offset_pct = Decimal(str(config.get(offset_key, "0.0005")))
                         if offset_pct < 0: raise ValueError("Limit order offset percentage cannot be negative.")
                         
                         raw_px = current_price_decimal * (Decimal(1) - offset_pct if signal=="BUY" else Decimal(1) + offset_pct)
                         limit_px = (raw_px / min_tick_size).quantize(Decimal('1'),ROUND_DOWN if signal=="BUY" else ROUND_UP)*min_tick_size
                         
                         if not (limit_px and limit_px > 0): raise ValueError(f"Limit price calc invalid: {limit_px}")
                         lg.info(f"Calculated Limit Entry for {signal} on {symbol}: {_format_price_or_na(limit_px, price_precision, 'Limit Px')}")
                     except Exception as e_lim: 
                         lg.error(f"{NEON_RED}Error calc limit price for {symbol}: {e_lim}. Switching to Market.{RESET}",exc_info=False); entry_type="market";limit_px=None
            
            limit_px_log_label = f"Limit Px {signal}"
            lg.info(f"{NEON_YELLOW}==> Placing {_format_signal(signal)} {entry_type.upper()} | Size: {pos_size_dec:.{amount_precision}f}"
                    f"{f' @ {_format_price_or_na(limit_px, price_precision, limit_px_log_label)}' if limit_px else ''} <==")
            trade_order = place_trade(exchange,symbol,signal,pos_size_dec,market_info,lg,entry_type,limit_px,False)

            if trade_order and trade_order.get('id'):
                order_id, order_status = trade_order['id'], trade_order.get('status', 'unknown')
                lg.info(f"{NEON_GREEN}Order placed for {symbol}: ID={order_id}, Status={order_status}{RESET}")

                if entry_type == 'market' or (entry_type == 'limit' and order_status == 'closed'):
                    confirm_delay = config.get("position_confirm_delay_seconds", POSITION_CONFIRM_DELAY_SECONDS)
                    lg.info(f"Waiting {confirm_delay}s for position confirmation ({symbol})...")
                    time.sleep(confirm_delay)
                    confirmed_pos = get_open_position(exchange, symbol, market_info, lg)

                    if confirmed_pos:
                        lg.info(f"{NEON_GREEN}Position Confirmed for {symbol} after {entry_type.capitalize()} Order!{RESET}")
                        try:
                            entry_px_actual = confirmed_pos.get('entryPriceDecimal')
                            if not (entry_px_actual and isinstance(entry_px_actual, Decimal) and entry_px_actual > 0):
                                fallback_price_info = f"limit price {_format_price_or_na(limit_px, price_precision)}" if entry_type == 'limit' and limit_px and limit_px > 0 else f"initial estimate {current_price_decimal:.{price_precision}f}"
                                lg.warning(f"Could not get valid actual entry price for {symbol}. Using {fallback_price_info} for protection.")
                                entry_px_actual = limit_px if entry_type == 'limit' and limit_px and limit_px > 0 else current_price_decimal
                            
                            if not (entry_px_actual and isinstance(entry_px_actual, Decimal) and entry_px_actual > 0):
                                 raise ValueError("Cannot determine valid entry price for protection setup.")
                            
                            lg.info(f"Using Entry Price for Protection ({symbol}): {NEON_CYAN}{entry_px_actual:.{price_precision}f}{RESET}")
                            _, tp_f, sl_f = analyzer.calculate_entry_tp_sl(entry_px_actual, signal) # tp_f, sl_f are Decimal or None
                            tp_f_s = _format_price_or_na(tp_f, price_precision, "Final TP")
                            sl_f_s = _format_price_or_na(sl_f, price_precision, "Final SL")
                            
                            prot_ok = False
                            # Use tsl_enabled_config defined earlier in the function's scope
                            if tsl_enabled_config: 
                                 lg.info(f"Setting TSL for {symbol} (TP target: {tp_f_s})...")
                                 prot_ok = set_trailing_stop_loss(exchange,symbol,market_info,confirmed_pos,config,lg,tp_f)
                            # Only set fixed SL/TP if TSL is not enabled, and if at least one of them is valid
                            elif (sl_f and isinstance(sl_f, Decimal) and sl_f > 0) or \
                                 (tp_f and isinstance(tp_f, Decimal) and tp_f > 0):
                                 lg.info(f"Setting Fixed SL ({sl_f_s}) and TP ({tp_f_s}) for {symbol}...")
                                 prot_ok = _set_position_protection(exchange,symbol,market_info,confirmed_pos,lg,sl_f,tp_f)
                            else: 
                                 lg.debug(f"No valid SL/TP for fixed protection for {symbol}, and TSL disabled."); prot_ok = True 
                            
                            if prot_ok: lg.info(f"{NEON_GREEN}=== TRADE ENTRY & PROTECTION SETUP COMPLETE ({symbol} {_format_signal(signal)}) ==={RESET}")
                            else: lg.error(f"{NEON_RED}=== TRADE ({symbol} {_format_signal(signal)}) placed BUT FAILED TO SET PROTECTION ==={RESET}"); lg.warning(f"{NEON_RED}>>> MANUAL MONITORING REQUIRED! <<<")
                        except Exception as post_err: lg.error(f"{NEON_RED}Error post-trade protection ({symbol}): {post_err}{RESET}", exc_info=True); lg.warning(f"{NEON_RED}Position open but protection failed. Manual check!{RESET}")
                    else: lg.error(f"{NEON_RED}Order {order_id} ({entry_type}) for {symbol} reported filled/placed, but FAILED TO CONFIRM open position! Manual check!{RESET}")
                elif entry_type == 'limit' and order_status == 'open':
                     lg.info(f"{NEON_YELLOW}Limit order {order_id} for {symbol} OPEN @ {_format_price_or_na(limit_px, price_precision, f'Limit Px {signal}')}. Waiting for fill.{RESET}")
                else: lg.error(f"{NEON_RED}Limit order {order_id} for {symbol} status: {order_status}. Trade not open as expected.{RESET}")
            else: lg.error(f"{NEON_RED}=== TRADE EXECUTION FAILED ({symbol} {_format_signal(signal)}). No order ID. ==={RESET}")
        else: lg.info(f"Signal is {_format_signal(signal)} and no open position for {symbol}. No entry action.")

    else: # --- Scenario 2: Existing Open Position ---
        pos_side = open_position.get('side') 
        pos_size_dec = open_position.get('contractsDecimal') 
        entry_px_dec = open_position.get('entryPriceDecimal') 
        pos_ts_ms = open_position.get('timestamp_ms') 

        if not (pos_side and isinstance(pos_side, str) and pos_side in ['long','short'] and 
                isinstance(pos_size_dec,Decimal) and pos_size_dec > 0 and 
                isinstance(entry_px_dec,Decimal) and entry_px_dec > 0):
             lg.error(f"{NEON_RED}Cannot manage {symbol}: Invalid pos details. Side='{pos_side}',Size='{pos_size_dec}',Entry='{entry_px_dec}'.{RESET}"); return

        quote_prec = config.get('quote_currency_precision', market_info.get('quotePrecision', 2))
        # Define helper inside or ensure it's accessible if defined globally
        # def get_pos_field_str(...) 

        lg.info(f"{NEON_BLUE}--- Managing Position ({NEON_PURPLE}{symbol}{NEON_BLUE}) ---{RESET}")
        lg.info(f"  Side: {_format_side(pos_side)}, Size: {NEON_CYAN}{pos_size_dec:.{amount_precision}f}{RESET}, Entry: {_format_price_or_na(entry_px_dec, price_precision, 'Entry Px')}")
        lg.info(f"  MarkPx: {_format_price_or_na(open_position.get('markPriceDecimal'), price_precision, 'Mark Px')}, LiqPx: {_format_price_or_na(open_position.get('liquidationPriceDecimal'), price_precision, 'Liq Px')}")
        lg.info(f"  uPnL: {_format_price_or_na(open_position.get('unrealizedPnlDecimal'), quote_prec, 'uPnL')} {market_info.get('quote','USD')}")
        lg.info(f"  Exchange SL: {_format_price_or_na(open_position.get('stopLossPriceDecimal'), price_precision, 'Exch SL')}, TP: {_format_price_or_na(open_position.get('takeProfitPriceDecimal'), price_precision, 'Exch TP')}")
        lg.info(f"  TSL Active Val: {_format_price_or_na(open_position.get('trailingStopLossValue'), price_precision if open_position.get('trailingStopActivationPrice') else 2 , 'TSL Val')}")


        if (pos_side == 'long' and signal == "SELL") or (pos_side == 'short' and signal == "BUY"):
            lg.warning(f"{NEON_YELLOW}*** EXIT Signal ({_format_signal(signal)}) opposes {_format_side(pos_side)} position for {symbol}. Closing... ***{RESET}")
            _execute_close_position(exchange, symbol, market_info, open_position, lg, "opposing signal"); return

        lg.info(f"Signal ({_format_signal(signal)}) allows holding. Position management for {symbol}...")

        # time_exit_minutes_config was defined earlier
        if isinstance(time_exit_minutes_config, (int, float)) and time_exit_minutes_config > 0:
            if pos_ts_ms and isinstance(pos_ts_ms, int):
                try:
                    elapsed_min = (int(time.time()*1000) - pos_ts_ms) / 60000.0 
                    lg.debug(f"Time Exit Check ({symbol}): Elapsed={elapsed_min:.2f}m, Limit={time_exit_minutes_config}m")
                    if elapsed_min >= time_exit_minutes_config:
                        lg.warning(f"{NEON_YELLOW}*** TIME-BASED EXIT for {symbol} ({elapsed_min:.1f} >= {time_exit_minutes_config}m). Closing... ***{RESET}")
                        _execute_close_position(exchange, symbol, market_info, open_position, lg, "time-based exit"); return
                except Exception as terr: lg.error(f"{NEON_RED}Time exit check error for {symbol}: {terr}{RESET}", exc_info=True)
            else: lg.warning(f"{NEON_YELLOW}Time exit enabled for {symbol} but position timestamp invalid/missing ({pos_ts_ms}).{RESET}")
        
        is_tsl_exch_active = False
        tsl_val_raw = open_position.get('trailingStopLossValue') or open_position.get('info', {}).get('trailingStopValue')
        if tsl_val_raw and str(tsl_val_raw).strip() and str(tsl_val_raw) != '0':
            try: 
                if Decimal(str(tsl_val_raw)) > 0: is_tsl_exch_active = True; lg.debug(f"TSL appears active on exchange for {symbol}.")
            except: pass 

        # be_enabled_config was defined earlier
        if be_enabled_config and not is_tsl_exch_active:
            lg.info(f"{NEON_BLUE}--- Break-Even Check ({NEON_PURPLE}{symbol}{NEON_BLUE}) ---{RESET}")
            try:
                lg.info(f"DEBUG BE_ATR_CHECK ({symbol}): current_atr is '{current_atr}', type is {type(current_atr)}")
                if not (isinstance(current_atr, Decimal) and current_atr > 0):
                     lg.warning(f"{NEON_YELLOW}BE check skipped for {symbol}: Current ATR invalid ({current_atr}).{RESET}")
                else: 
                    be_trig_atr = Decimal(str(config.get("break_even_trigger_atr_multiple", "1.0")))
                    be_off_ticks = int(config.get("break_even_offset_ticks", 2))
                    px_diff = (current_price_decimal - entry_px_dec) if pos_side == 'long' else (entry_px_dec - current_price_decimal)
                    profit_atr = px_diff / current_atr
                    lg.info(f"  BE Status ({symbol}): PxDiff={_format_price_or_na(px_diff, price_precision+1, 'PxDiff')}, ProfitATRs={profit_atr:.2f}, TargetATRs={be_trig_atr:.2f}")

                    if profit_atr >= be_trig_atr:
                        lg.info(f"  {NEON_GREEN}BE Trigger Met for {symbol}! Calculating BE stop.{RESET}")
                        if not (min_tick_size and isinstance(min_tick_size, Decimal) and min_tick_size > 0):
                             lg.warning(f"  {NEON_YELLOW}Cannot calc BE offset for {symbol}: Min tick invalid.{RESET}")
                        else:
                            tick_off = min_tick_size * Decimal(be_off_ticks)
                            raw_be_px = entry_px_dec + tick_off if pos_side == 'long' else entry_px_dec - tick_off
                            rnd_mode = ROUND_UP if pos_side == 'long' else ROUND_DOWN
                            be_px = (raw_be_px / min_tick_size).quantize(Decimal('1'), rnd_mode) * min_tick_size
                            
                            if not (be_px and be_px > 0): lg.error(f"  {NEON_RED}Calc BE stop invalid for {symbol}: {be_px}.{RESET}")
                            else:
                                lg.info(f"  Target BE Stop Price for {symbol}: {NEON_CYAN}{be_px:.{price_precision}f}{RESET}")
                                cur_sl_dec = open_position.get('stopLossPriceDecimal')
                                upd_be_sl = False
                                if not (cur_sl_dec and isinstance(cur_sl_dec, Decimal) and cur_sl_dec > 0):
                                    upd_be_sl = True; lg.info(f"  BE ({symbol}): No valid current SL. Setting BE SL.")
                                elif (pos_side=='long' and be_px > cur_sl_dec) or (pos_side=='short' and be_px < cur_sl_dec):
                                    upd_be_sl=True; lg.info(f"  BE ({symbol}): Target {_format_price_or_na(be_px, price_precision, 'BE Px')} better than Current {_format_price_or_na(cur_sl_dec, price_precision, 'Cur SL')}. Updating.")
                                else: lg.debug(f"  BE ({symbol}): Current SL {_format_price_or_na(cur_sl_dec, price_precision, 'Cur SL')} already better/equal.")
                                
                                if upd_be_sl:
                                    lg.warning(f"{NEON_YELLOW}*** Moving SL to Break-Even for {symbol} at {be_px:.{price_precision}f} ***{RESET}")
                                    cur_tp_dec = open_position.get('takeProfitPriceDecimal')
                                    if _set_position_protection(exchange,symbol,market_info,open_position,lg,be_px,cur_tp_dec):
                                        lg.info(f"{NEON_GREEN}BE SL set/updated successfully for {symbol}.{RESET}")
                                    else: lg.error(f"{NEON_RED}Failed to set/update BE SL for {symbol}. Manual check!{RESET}")
                    else: lg.info(f"  BE Profit target not reached for {symbol} ({profit_atr:.2f} < {be_trig_atr:.2f} ATRs).")
            except Exception as be_e: lg.error(f"{NEON_RED}Error in BE check ({symbol}): {be_e}{RESET}", exc_info=True)
        elif is_tsl_exch_active: lg.debug(f"BE check skipped for {symbol}: TSL active on exchange.")
        else: lg.debug(f"BE check skipped for {symbol}: BE disabled in config.")
        
        # tsl_enabled_config was defined earlier
        if tsl_enabled_config and not is_tsl_exch_active:
            lg.info(f"{NEON_BLUE}--- Trailing Stop Loss Check ({NEON_PURPLE}{symbol}{NEON_BLUE}) ---{RESET}")
            lg.info(f"  Attempting to set/update TSL (enabled & not active on exch).")
            _, tsl_tp_target, _ = analyzer.calculate_entry_tp_sl(entry_px_dec, pos_side) 
            if set_trailing_stop_loss(exchange, symbol, market_info, open_position, config, lg, tsl_tp_target):
                lg.info(f"  {NEON_GREEN}TSL setup/update initiated successfully for {symbol}.{RESET}")
            else:
                lg.warning(f"  {NEON_YELLOW}Failed to initiate TSL setup/update for {symbol}.{RESET}")
        elif tsl_enabled_config and is_tsl_exch_active:
            lg.debug(f"TSL enabled but already appears active on exchange for {symbol}. No TSL action.")
        
        lg.info(f"{NEON_CYAN}------------------------------------{RESET}") 


    lg.info(f"{NEON_BLUE}---== Analysis Cycle End ({NEON_PURPLE}{symbol}{NEON_BLUE}, {time.monotonic() - cycle_start_time:.2f}s) ==---{RESET}\n")