mkdir -p ~/.config/zsh ~/.cache/zsh ~/.local/state/zsh ~/.local/share/gnupg                                                                   cat <<'EOF' > ~/.config/zsh/.zshrc                                     #!/bin/zsh                                                             # ~/.config/zsh/.zshrc - Termux Zsh Supercharged Edition ðŸ”¥            # Features: XDG Compliance â€¢ Zinit Turbo â€¢ AI Integration â€¢ GPG History â€¢ Powerlevel10k                                                       # Last Updated: $(date +"%Y-%m-%d")                                                                                                           # -*- Shell Options and Performance -*-                                setopt COMBINING_CHARS        # Combine zero-length punctuation chars  setopt INTERACTIVE_COMMENTS   # Allow comments in interactive shell    setopt RC_QUOTES              # Allow 'Henry''s Garage' style quoting  setopt EXTENDED_GLOB          # Enable powerful zsh glob patterns      setopt AUTO_PARAM_SLASH       # Add trailing slash after directory completion                                                                                                                                        # -*- XDG Base Directory Compliance -*-                                export ZDOTDIR="${XDG_CONFIG_HOME:-$HOME/.config}/zsh"                 export ZSH_CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/zsh"             export HISTFILE="${XDG_STATE_HOME:-$HOME/.local/state}/zsh/history"    export ZCOMPDUMP="${ZSH_CACHE_DIR}/zcompdump-${HOST}-${ZSH_VERSION}"   export GPG_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/gnupg"           export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/ssh-agent.socket"                                                                                    # -*- Directory Creation -*-                                           () {                                                                     local dirs=(                                                             ${ZDOTDIR}/{functions,plugins,conf.d}                                  ${ZSH_CACHE_DIR}                                                       ${HISTFILE:h}                                                          ${GPG_HOME}                                                          )                                                                      command mkdir -p ${^dirs} 2>/dev/null                                }                                                                                                                                             # -*- Powerlevel10k Instant Prompt -*-                                 [[ -r "${ZSH_CACHE_DIR}/p10k-instant-prompt-${(%):-%n}.zsh" ]] &&        source "${ZSH_CACHE_DIR}/p10k-instant-prompt-${(%):-%n}.zsh"                                                                                # -*- Zinit Plugin Manager -*-                                         declare -A ZINIT                                                       ZINIT[HOME_DIR]="${XDG_DATA_HOME:-$HOME/.local/share}/zinit"           ZINIT[BIN_DIR]="${ZINIT[HOME_DIR]}/bin"                                ZINIT[ZCOMPDUMP_PATH]="${ZCOMPDUMP}"                                                                                                          if [[ ! -f "${ZINIT[BIN_DIR]}/zinit.zsh" ]]; then                        command mkdir -p "${ZINIT[BIN_DIR]}" && \                              command git clone --depth 1 https://github.com/zdharma-continuum/zinit \                                                                        "${ZINIT[BIN_DIR]}" || {                                                 print -P "%F{196}Failed to install Zinit!%f"                           return 1                                                             }                                                                  fi                                                                                                                                            source "${ZINIT[BIN_DIR]}/zinit.zsh"                                   autoload -Uz _zinit && _zinit                                                                                                                 # -*- Plugin Configuration -*-                                         zinit light-mode for \                                                   zdharma-continuum/fast-syntax-highlighting \                           zsh-users/zsh-autosuggestions \                                        zsh-users/zsh-completions \                                            zsh-users/zsh-history-substring-search \                               romkatv/powerlevel10k \                                                atload='POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true' \              atinit='ZINIT[COMPINIT_OPTS]=-C' \                                     atpull='zinit creinstall -q .'                                                                                                              zinit ice depth=1; zinit light romkatv/powerlevel10k                                                                                          # -*- Aliases -*-                                                      alias ls='eza --group-directories-first --icons --color=auto'          alias la='ls -la'                                                      alias lg='lazygit'                                                     alias nv='nvim'                                                        alias icat='kitty +kitten icat'                                        alias ytmp3='yt-dlp -x --audio-format mp3 --embed-thumbnail'           alias pbcopy='termux-clipboard-set'                                    alias pbpaste='termux-clipboard-get'                                                                                                          # -*- AI Assistant Integration -*-                                     function ai() {                                                          if (( $+commands[aichat] )); then                                        aichat --model=gpt-4-turbo "$@"                                      elif (( $+commands[ollama] )); then                                      ollama run llama3 "$@"                                               else                                                                     print -P "%F{196}Install AI tools:%f\n  $ setup-ai"                    return 1                                                             fi                                                                   }                                                                                                                                             # -*- Smart History Management -*-                                     function encrypt-history() {                                             if (( $+commands[gpg] )); then                                           gpg --encrypt --recipient ${GPG_KEY} --output ${HISTFILE}.gpg ${HISTFILE}                                                                     command rm -f ${HISTFILE}                                            fi                                                                   }                                                                                                                                             function decrypt-history() {                                             if [[ -f ${HISTFILE}.gpg ]]; then                                        gpg --decrypt --quiet --output ${HISTFILE} ${HISTFILE}.gpg           fi                                                                   }                                                                                                                                             autoload -Uz add-zsh-hook                                              add-zsh-hook zshexit encrypt-history                                   add-zsh-hook precmd decrypt-history                                                                                                           # -*- Development Environments -*-                                     function load-nvm() {                                                    export NVM_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/nvm"              [[ -s "${NVM_DIR}/nvm.sh" ]] && source "${NVM_DIR}/nvm.sh" --no-use    (( $+commands[node] )) || setup-node                                 }                                                                                                                                             function pyenv() {                                                       local venv_dir="${PWD}/.venv"                                          [[ -d ${venv_dir} ]] || python -m venv ${venv_dir}                     source ${venv_dir}/bin/activate                                      }                                                                                                                                             # -*- System Setup Commands -*-                                        function setup-essentials() {                                            pkg update && pkg upgrade -y                                           pkg install -y git zsh nodejs python rust make cmake \
    neovim exa bat fd ripgrep lazygit                                  }                                                                                                                                             function setup-ai() {                                                    if (( $+commands[cargo] )); then                                         cargo install aichat                                                 else                                                                     print -P "%F{196}Install Rust first:%f\n  $ setup-essentials"        fi                                                                   }                                                                                                                                             # -*- Key Bindings -*-                                                 bindkey -v                                                             bindkey '^ ' autosuggest-accept                                        bindkey '^[[A' history-substring-search-up                             bindkey '^[[B' history-substring-search-down                           bindkey '^R' history-incremental-pattern-search-backward                                                                                      # -*- Final Initialization -*-                                         [[ ! -f ${ZDOTDIR}/.p10k.zsh ]] || source ${ZDOTDIR}/.p10k.zsh         [[ -f ${ZDOTDIR}/conf.d/*.zsh ]] && source ${ZDOTDIR}/conf.d/*.zsh(.)                                                                         # -*- Status Report -*-                                                print -P "%F{082}Zsh ${ZSH_VERSION} loaded in ${(%.3)$(( SECONDS * 1000 ))} ms%f"                                                             EOF                                                                    source ~/.config/zsh/.zshrc
EOF
