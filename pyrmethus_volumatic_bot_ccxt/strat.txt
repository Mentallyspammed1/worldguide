# -*- coding: utf-8 -*-
"""
Strategy Definition: Enhanced Volumatic Trend + OB (for CCXT Async Bot)
"""
import logging
from decimal import Decimal, ROUND_DOWN, ROUND_UP, getcontext
from typing import Any, Dict, List, Optional, Tuple, TypedDict

import numpy as np
import pandas as pd
import pandas_ta as ta
from colorama import Fore, Style

log = logging.getLogger(__name__) # Gets logger configured in main.py
getcontext().prec = 18 # Set decimal precision for calculations

# --- Type Definitions (consistent with main.py) ---
class OrderBlock(TypedDict):
    id: int # Index of the candle where the OB formed (relative to current df)
    type: str # 'bull' or 'bear'
    left_idx: int # Index of bar where OB formed
    right_idx: int # Index of last bar OB is valid for (updated if active)
    top: float
    bottom: float
    active: bool # Still considered valid?
    closed_idx: Optional[int] # Index where it was invalidated

class AnalysisResults(TypedDict):
    dataframe: pd.DataFrame
    last_signal: str # 'BUY', 'SELL', 'HOLD', 'EXIT_LONG', 'EXIT_SHORT'
    active_bull_boxes: List[OrderBlock]
    active_bear_boxes: List[OrderBlock]
    last_close: float
    current_trend: Optional[bool] # True for UP, False for DOWN
    trend_changed: bool
    last_atr: Optional[float] # Last calculated ATR value

# --- Strategy Class ---
class VolumaticOBStrategy:
    """
    Encapsulates the logic from the 'Enhanced Volumatic Trend + OB' Pine Script.
    Calculates indicators and generates trading signals based on OHLCV data.
    Uses CCXT market structure for precision handling.
    """
    def __init__(self, market: Dict[str, Any], **params: Any):
        """
        Initializes the strategy.
        Args:
            market: CCXT market structure dictionary.
            **params: Strategy parameters loaded from config.json['strategy']['params'].
        """
        self.market = market
        self._parse_params(params)
        self._validate_params()

        # State Variables - initialized to None or empty
        self.upper: Optional[float] = None
        self.lower: Optional[float] = None
        self.lower_vol: Optional[float] = None
        self.upper_vol: Optional[float] = None
        self.step_up: Optional[float] = None
        self.step_dn: Optional[float] = None
        self.bull_boxes: List[OrderBlock] = []
        self.bear_boxes: List[OrderBlock] = []
        # last_signal_state tracks the *intended* state ('BUY' means trying to be long, 'SELL' means trying to be short)
        # This helps prevent duplicate entry signals if the condition persists.
        self.last_signal_state = "HOLD" # Internal state: HOLD, BUY (want long), SELL (want short)
        self.current_trend: Optional[bool] = None # True=UP, False=DOWN

        # Calculate minimum required data length based on largest period needed
        self.min_data_len = max(
            self.length + 4, # For _ema_swma shift and calculation
            self.vol_atr_period,
            self.vol_percentile_len,
            self.pivot_left_h + self.pivot_right_h + 1, # Lookback + current + lookforward
            self.pivot_left_l + self.pivot_right_l + 1
        )

        # Extract precision details from CCXT market structure
        try:
            self.price_precision = int(market.get('precision', {}).get('price', 8)) # Default 8 if not found
            self.amount_precision = int(market.get('precision', {}).get('amount', 8)) # Default 8
            # Use Decimal for tick sizes to avoid float inaccuracies
            self.price_tick = Decimal(str(market.get('precision', {}).get('price', '0.00000001')))
            self.amount_tick = Decimal(str(market.get('precision', {}).get('amount', '0.00000001')))
            if self.price_tick <= 0 or self.amount_tick <= 0:
                raise ValueError("Market precision ticks must be positive.")
        except (ValueError, TypeError) as e:
            log.error(f"Could not parse market precision: {e}. Using defaults.")
            self.price_precision = 8
            self.amount_precision = 8
            self.price_tick = Decimal('0.00000001')
            self.amount_tick = Decimal('0.00000001')


        log.info(f"{Fore.MAGENTA}Initializing VolumaticOB Strategy Engine...{Style.RESET_ALL}")
        log.info(f"Symbol: {market.get('symbol', 'N/A')}")
        log.info(f"Params: TrendLen={self.length}, Pivots={self.pivot_left_h}/{self.pivot_right_h}, "
                 f"MaxBoxes={self.max_boxes}, OB Source={self.ob_source}")
        log.info(f"Minimum data points required: {self.min_data_len}")
        log.debug(f"Price Precision: {self.price_precision}, Amount Precision: {self.amount_precision}")
        log.debug(f"Price Tick: {self.price_tick}, Amount Tick: {self.amount_tick}")


    def _parse_params(self, params: Dict[str, Any]):
        """Load and type-cast parameters from the config dict."""
        try:
            self.length = int(params.get('length', 40))
            self.vol_atr_period = int(params.get('vol_atr_period', 200))
            self.vol_percentile_len = int(params.get('vol_percentile_len', 1000))
            self.vol_percentile = int(params.get('vol_percentile', 95))
            self.ob_source = str(params.get('ob_source', "Wicks"))
            self.pivot_left_h = int(params.get('pivot_left_h', 10))
            self.pivot_right_h = int(params.get('pivot_right_h', 10))
            self.pivot_left_l = int(params.get('pivot_left_l', 10))
            self.pivot_right_l = int(params.get('pivot_right_l', 10))
            self.max_boxes = int(params.get('max_boxes', 5))
        except (ValueError, TypeError) as e:
            raise ValueError(f"Invalid strategy parameter type in config: {e}") from e

    def _validate_params(self):
        """Basic validation of strategy parameters."""
        if self.ob_source not in ["Wicks", "Bodys"]:
            raise ValueError("Invalid 'ob_source' parameter. Must be 'Wicks' or 'Bodys'.")
        lengths = [self.length, self.vol_atr_period, self.vol_percentile_len,
                   self.pivot_left_h, self.pivot_right_h, self.pivot_left_l, self.pivot_right_l]
        if not all(isinstance(x, int) and x > 0 for x in lengths):
             raise ValueError("All length/period parameters must be positive integers.")
        if not isinstance(self.max_boxes, int) or self.max_boxes <= 0:
             raise ValueError("'max_boxes' must be a positive integer.")
        if not 0 < self.vol_percentile <= 100:
             raise ValueError("'vol_percentile' must be between 1 and 100 (exclusive of 0).")

    # --- Precision Handling using CCXT market data ---
    def format_price(self, price: float) -> str:
        """Formats price according to market precision (for display/logging)."""
        return f"{Decimal(str(price)):.{self.price_precision}f}"

    def format_amount(self, amount: float) -> str:
        """Formats amount according to market precision (for display/logging)."""
        return f"{Decimal(str(amount)):.{self.amount_precision}f}"

    def round_price(self, price: float) -> float:
        """Rounds price UP or DOWN to the nearest price tick."""
        price_decimal = Decimal(str(price))
        # Determine rounding direction based on typical usage (e.g., SL slightly further, TP slightly closer)
        # For simplicity here, just rounding to nearest tick. Adjust if needed.
        # Using ROUND_HALF_UP as a general case, but specific cases might need ROUND_UP or ROUND_DOWN.
        # For SL buy: round down. For SL sell: round up. For TP buy: round down. For TP sell: round up.
        # Let's stick to a simple rounding for now, order placement logic can refine.
        rounded = (price_decimal / self.price_tick).quantize(Decimal('1'), rounding=ROUND_UP if price_decimal > 0 else ROUND_DOWN) * self.price_tick
        return float(rounded)

    def round_amount(self, amount: float) -> float:
        """Rounds amount DOWN to the nearest amount tick (conservative)."""
        amount_decimal = Decimal(str(amount))
        # Always round amount down to avoid insufficient funds or exceeding limits
        rounded = (amount_decimal / self.amount_tick).quantize(Decimal('1'), rounding=ROUND_DOWN) * self.amount_tick
        return float(rounded)
    # --- End Precision Handling ---


    def _ema_swma(self, series: pd.Series, length: int) -> pd.Series:
        """Helper for smoothed EMA (SWMA(4) -> EMA(length))."""
        if len(series) < length + 4: # Need enough data for rolling window and EMA
            return pd.Series(np.nan, index=series.index)

        # Calculate 4-period Smoothed Moving Average (equivalent to LWMA with weights [1,2,2,1]/6)
        weights = np.array([1, 2, 2, 1]) / 6.0
        # Apply rolling weighted average. Ensure min_periods=4.
        swma = series.rolling(window=4, min_periods=4).apply(lambda x: np.dot(x, weights) if len(x)==4 else np.nan, raw=True)

        # Calculate EMA of the SWMA
        ema_of_swma = ta.ema(swma, length=length, fillna=False) # Use fillna=False initially
        return ema_of_swma.fillna(np.nan) # Explicitly handle NaNs

    def _find_pivots(self, df: pd.DataFrame, left: int, right: int, is_high: bool) -> pd.Series:
        """
        Finds pivot points similar to Pine Script's ta.pivothigh/low.
        Args:
            df: DataFrame containing price data.
            left: Number of bars to the left.
            right: Number of bars to the right.
            is_high: True to find pivot highs, False for pivot lows.
        Returns:
            A pandas Series with pivot prices at the pivot bar index, NaN otherwise.
        """
        if self.ob_source == "Wicks":
             source_col = 'high' if is_high else 'low'
        else: # Bodys
             # Use close for high pivot, open for low pivot (common interpretation)
             source_col = 'close' if is_high else 'open'

        if source_col not in df.columns:
            log.error(f"Source column '{source_col}' not found for pivot calculation.")
            return pd.Series(np.nan, index=df.index)

        source_series = df[source_col]
        pivots = pd.Series(np.nan, index=df.index)

        # Iterate through the series where a full window (left + current + right) is available
        for i in range(left, len(df) - right):
            pivot_val = source_series.iloc[i]
            if pd.isna(pivot_val): continue # Skip if pivot candidate value is NaN

            is_pivot = True
            # Check left bars
            for j in range(1, left + 1):
                left_val = source_series.iloc[i - j]
                if pd.isna(left_val): continue # Skip comparison if left value is NaN
                # For high pivot: left value must be strictly less than pivot value
                # For low pivot: left value must be strictly greater than pivot value
                if (is_high and left_val >= pivot_val) or \
                   (not is_high and left_val <= pivot_val):
                    is_pivot = False; break
            if not is_pivot: continue

            # Check right bars
            for j in range(1, right + 1):
                right_val = source_series.iloc[i + j]
                if pd.isna(right_val): continue # Skip comparison if right value is NaN
                # For high pivot: right value must be less than or equal to pivot value
                # For low pivot: right value must be greater than or equal to pivot value
                if (is_high and right_val > pivot_val) or \
                   (not is_high and right_val < pivot_val):
                    is_pivot = False; break

            if is_pivot:
                pivots.iloc[i] = pivot_val # Store the pivot value at the pivot index
        return pivots

    def update(self, df_input: pd.DataFrame) -> AnalysisResults:
        """
        Calculates indicators and generates signals based on the input DataFrame.
        Args:
            df_input: pandas DataFrame with OHLCV columns and DatetimeIndex.
                      Assumes the last row is the most recent *closed* candle.
        Returns:
            AnalysisResults dictionary containing calculated data and signals.
        """
        if df_input.empty or len(df_input) < self.min_data_len:
            log.warning(f"Not enough data ({len(df_input)}/{self.min_data_len}) for analysis.")
            # Return default state if not enough data
            return AnalysisResults(
                dataframe=df_input, last_signal="HOLD", active_bull_boxes=self.bull_boxes,
                active_bear_boxes=self.bear_boxes, last_close=np.nan, current_trend=self.current_trend,
                trend_changed=False, last_atr=None
            )

        df = df_input.copy()
        log.debug(f"Analyzing {len(df)} candles ending {df.index[-1]}...")

        # --- Volumatic Trend Calculations ---
        df['atr'] = ta.atr(df['high'], df['low'], df['close'], length=self.vol_atr_period, fillna=False)
        df['ema1'] = self._ema_swma(df['close'], length=self.length) # Smoothed EMA
        df['ema2'] = ta.ema(df['close'], length=self.length, fillna=False) # Regular EMA

        # Determine trend based on EMA comparison
        # Use np.where for vectorized comparison, handle NaNs
        df['trend_up'] = np.where(df['ema1'] < df['ema2'], True,
                         np.where(df['ema1'] >= df['ema2'], False, np.nan))
        # Forward fill the trend to handle initial NaNs if EMAs haven't converged
        df['trend_up'] = df['trend_up'].ffill()

        # Detect trend changes
        df['trend_changed'] = (df['trend_up'] != df['trend_up'].shift(1)) & df['trend_up'].notna() & df['trend_up'].shift(1).notna()

        # Get values from the last (most recent closed) candle
        last_row = df.iloc[-1]
        current_trend_up = last_row['trend_up']
        trend_just_changed = last_row['trend_changed']
        last_atr_value = last_row['atr'] if pd.notna(last_row['atr']) else None

        # Update dynamic levels only when trend changes or initially
        if pd.notna(current_trend_up):
            # Update if trend is identified for the first time OR if it changed on this candle
            if self.current_trend is None or (trend_just_changed and current_trend_up != self.current_trend):
                is_initial_trend = self.current_trend is None
                self.current_trend = current_trend_up # Update strategy's trend state
                log.info(f"{Fore.MAGENTA}{'Initial Trend Detected' if is_initial_trend else 'Trend Changed'}! New Trend: {'UP' if current_trend_up else 'DOWN'}. Updating levels...{Style.RESET_ALL}")

                # Recalculate levels based on the candle where trend changed
                # Use the EMA1 and ATR from the candle *before* the change for stability? Or the current one?
                # Let's use the current candle's values for simplicity.
                current_ema1 = last_row['ema1']
                current_atr = last_row['atr']
                if pd.notna(current_ema1) and pd.notna(current_atr) and current_atr > 1e-9: # Ensure ATR is valid
                    atr_mult = 3.0 # Multiplier for main bands
                    vol_atr_mult = 4.0 # Multiplier for vol bands relative to EMA1
                    self.upper = current_ema1 + current_atr * atr_mult
                    self.lower = current_ema1 - current_atr * atr_mult
                    # Vol bands are offset from the *opposite* main band
                    self.lower_vol = self.lower + current_atr * vol_atr_mult
                    self.upper_vol = self.upper - current_atr * vol_atr_mult
                    # Ensure vol bands don't cross main bands
                    if self.lower_vol < self.lower: self.lower_vol = self.lower
                    if self.upper_vol > self.upper: self.upper_vol = self.upper
                    # Calculate step size (used in original Pine for dynamic adjustments, less critical here)
                    self.step_up = (self.lower_vol - self.lower) / 100 if self.lower_vol > self.lower else 0
                    self.step_dn = (self.upper - self.upper_vol) / 100 if self.upper > self.upper_vol else 0
                    log.info(f"Levels Updated @ {df.index[-1]}: U={self.format_price(self.upper)}, L={self.format_price(self.lower)}")
                else:
                     log.warning(f"Could not update levels @ {df.index[-1]} due to NaN/zero EMA1/ATR. Levels reset.")
                     self.upper, self.lower, self.lower_vol, self.upper_vol, self.step_up, self.step_dn = [None] * 6

        # --- Volume Normalization (Optional - not directly used in OB/Trend signals here) ---
        # Calculate rolling volume percentile for context if needed elsewhere
        roll_window = min(self.vol_percentile_len, len(df))
        min_periods_vol = max(1, min(roll_window // 2, 50)) # Require some data but not full window initially
        if roll_window > 0:
            df['vol_percentile_val'] = df['volume'].rolling(window=roll_window, min_periods=min_periods_vol).apply(
                lambda x: np.nanpercentile(x, self.vol_percentile) if np.any(~np.isnan(x) & (x > 0)) else np.nan, raw=True)

            df['vol_norm'] = np.where(
                (df['vol_percentile_val'].notna()) & (df['vol_percentile_val'] > 1e-9),
                (df['volume'] / df['vol_percentile_val'] * 100), 0 # Normalize volume against percentile value
            ).fillna(0).astype(float)
        else:
            df['vol_percentile_val'] = np.nan
            df['vol_norm'] = 0.0


        # --- Pivot Order Block Calculations ---
        df['ph'] = self._find_pivots(df, self.pivot_left_h, self.pivot_right_h, is_high=True)
        df['pl'] = self._find_pivots(df, self.pivot_left_l, self.pivot_right_l, is_high=False)

        # --- Create and Manage Order Blocks ---
        # Only need to check recent bars for *new* pivots that could form OBs
        # Check bars from (current - right_lookback) index for pivots
        check_start_idx = max(0, len(df) - max(self.pivot_right_h, self.pivot_right_l) - 5) # Check a bit further back just in case
        new_boxes_created_count = 0
        df['int_index'] = range(len(df)) # Use integer index for OB tracking

        # Iterate through potential pivot locations in the recent part of the dataframe
        for i in range(check_start_idx, len(df)):
            # Check for Bearish Box from Pivot High
            # Pivot occurs at index 'i', detected after 'pivot_right_h' bars pass
            pivot_occur_int_idx = i
            if pd.notna(df['ph'].iloc[pivot_occur_int_idx]):
                # Check if this pivot index already has a bear box
                if not any(b['id'] == pivot_occur_int_idx for b in self.bear_boxes):
                    ob_candle = df.iloc[pivot_occur_int_idx]
                    # Define OB boundaries based on source
                    if self.ob_source == "Wicks":
                        top_price = ob_candle['high']
                        bottom_price = ob_candle['close'] # Bear OB: High to Close of up candle before down move
                    else: # Bodys
                        top_price = ob_candle['close']
                        bottom_price = ob_candle['open'] # Bear OB: Body of up candle

                    if pd.notna(top_price) and pd.notna(bottom_price):
                        # Ensure top > bottom
                        if bottom_price > top_price: top_price, bottom_price = bottom_price, top_price
                        # Check if OB has a meaningful range (greater than ~tick size)
                        if Decimal(str(abs(top_price - bottom_price))) > self.price_tick / 10:
                            new_box = OrderBlock(id=pivot_occur_int_idx, type='bear', left_idx=pivot_occur_int_idx,
                                                 right_idx=len(df)-1, # Initially valid until current bar
                                                 top=top_price, bottom=bottom_price, active=True, closed_idx=None)
                            self.bear_boxes.append(new_box)
                            new_boxes_created_count += 1
                            log.info(f"{Fore.RED}New Bear OB {pivot_occur_int_idx} @ {df.index[pivot_occur_int_idx]}: T={self.format_price(top_price)}, B={self.format_price(bottom_price)}{Style.RESET_ALL}")

            # Check for Bullish Box from Pivot Low
            pivot_occur_int_idx = i
            if pd.notna(df['pl'].iloc[pivot_occur_int_idx]):
                 # Check if this pivot index already has a bull box
                 if not any(b['id'] == pivot_occur_int_idx for b in self.bull_boxes):
                    ob_candle = df.iloc[pivot_occur_int_idx]
                    # Define OB boundaries based on source
                    if self.ob_source == "Wicks":
                        top_price = ob_candle['open'] # Bull OB: Open to Low of down candle before up move
                        bottom_price = ob_candle['low']
                    else: # Bodys
                        top_price = ob_candle['open']
                        bottom_price = ob_candle['close'] # Bull OB: Body of down candle

                    if pd.notna(top_price) and pd.notna(bottom_price):
                        # Ensure top > bottom
                        if bottom_price > top_price: top_price, bottom_price = bottom_price, top_price
                        # Check if OB has a meaningful range
                        if Decimal(str(abs(top_price - bottom_price))) > self.price_tick / 10:
                            new_box = OrderBlock(id=pivot_occur_int_idx, type='bull', left_idx=pivot_occur_int_idx,
                                                 right_idx=len(df)-1, # Initially valid until current bar
                                                 top=top_price, bottom=bottom_price, active=True, closed_idx=None)
                            self.bull_boxes.append(new_box)
                            new_boxes_created_count += 1
                            log.info(f"{Fore.GREEN}New Bull OB {pivot_occur_int_idx} @ {df.index[pivot_occur_int_idx]}: T={self.format_price(top_price)}, B={self.format_price(bottom_price)}{Style.RESET_ALL}")

        # Manage existing boxes based on the latest close price
        current_close = last_row['close']
        current_bar_int_idx = len(df) - 1
        if pd.notna(current_close):
            closed_bull_count, closed_bear_count = 0, 0
            # Check Bull Boxes: Invalidate if close goes below the bottom
            for box in self.bull_boxes:
                if box['active']:
                    if current_close < box['bottom']:
                        box['active'] = False
                        box['closed_idx'] = current_bar_int_idx
                        closed_bull_count += 1
                    else:
                        # Keep extending the validity (right_idx) if still active
                        box['right_idx'] = current_bar_int_idx
            # Check Bear Boxes: Invalidate if close goes above the top
            for box in self.bear_boxes:
                if box['active']:
                    if current_close > box['top']:
                        box['active'] = False
                        box['closed_idx'] = current_bar_int_idx
                        closed_bear_count += 1
                    else:
                        # Keep extending the validity (right_idx) if still active
                        box['right_idx'] = current_bar_int_idx

            if closed_bull_count: log.info(f"{Fore.YELLOW}Closed {closed_bull_count} Bull OB(s) due to price breaking below.{Style.RESET_ALL}")
            if closed_bear_count: log.info(f"{Fore.YELLOW}Closed {closed_bear_count} Bear OB(s) due to price breaking above.{Style.RESET_ALL}")

        # Prune Order Blocks to keep memory usage reasonable
        # Keep only the most recent 'max_boxes' active boxes and maybe some recent inactive ones for history
        active_bull = sorted([b for b in self.bull_boxes if b['active']], key=lambda x: x['id'], reverse=True)
        inactive_bull = sorted([b for b in self.bull_boxes if not b['active']], key=lambda x: x['id'], reverse=True)
        self.bull_boxes = active_bull[:self.max_boxes] + inactive_bull[:self.max_boxes * 2] # Keep more inactive for context

        active_bear = sorted([b for b in self.bear_boxes if b['active']], key=lambda x: x['id'], reverse=True)
        inactive_bear = sorted([b for b in self.bear_boxes if not b['active']], key=lambda x: x['id'], reverse=True)
        self.bear_boxes = active_bear[:self.max_boxes] + inactive_bear[:self.max_boxes * 2]

        # --- Signal Generation ---
        signal = "HOLD"
        active_bull_boxes = [b for b in self.bull_boxes if b['active']] # Use pruned list
        active_bear_boxes = [b for b in self.bear_boxes if b['active']]

        # Only generate signals if trend is defined and close price is valid
        if self.current_trend is not None and pd.notna(current_close):
            # Priority 1: Exit signal if trend just changed against the desired position state
            if trend_just_changed:
                if not self.current_trend and self.last_signal_state == "BUY": # Trend changed DOWN while wanting LONG
                    signal = "EXIT_LONG"
                elif self.current_trend and self.last_signal_state == "SELL": # Trend changed UP while wanting SHORT
                    signal = "EXIT_SHORT"

            # Priority 2: Entry signals if trend allows and not already in desired state
            if signal == "HOLD": # Only check for entry if no exit signal was generated
                if self.current_trend: # Trend is UP -> Look for Long Entry
                    if self.last_signal_state != "BUY": # Only enter if not already trying to be long
                        # Check if price entered any active Bullish OB
                        for box in active_bull_boxes:
                            # Entry condition: Current close is within the Bull OB range
                            if box['bottom'] <= current_close <= box['top']:
                                signal = "BUY"
                                break # Take the first valid OB entry
                elif not self.current_trend: # Trend is DOWN -> Look for Short Entry
                    if self.last_signal_state != "SELL": # Only enter if not already trying to be short
                        # Check if price entered any active Bearish OB
                        for box in active_bear_boxes:
                            # Entry condition: Current close is within the Bear OB range
                            if box['bottom'] <= current_close <= box['top']:
                                signal = "SELL"
                                break # Take the first valid OB entry

        # Update internal state based on the generated signal
        if signal == "BUY":
            self.last_signal_state = "BUY"
        elif signal == "SELL":
            self.last_signal_state = "SELL"
        elif signal in ["EXIT_LONG", "EXIT_SHORT"]:
            self.last_signal_state = "HOLD" # Reset state after exit

        # Log the generated signal if it's not HOLD
        if signal != "HOLD":
             color = Fore.YELLOW if "EXIT" in signal else (Fore.GREEN if signal == "BUY" else Fore.RED)
             trend_str = 'UP' if self.current_trend else 'DOWN' if self.current_trend is not None else 'UNDETERMINED'
             log.warning(f"{color}{Style.BRIGHT}*** {signal} Signal generated at {self.format_price(current_close)} (Trend: {trend_str}) ***{Style.RESET_ALL}")
        else:
            log.debug(f"Signal: HOLD (Internal State: {self.last_signal_state}, Trend: {'UP' if self.current_trend else 'DOWN' if self.current_trend is not None else 'UNDETERMINED'})")


        df.drop(columns=['int_index'], inplace=True, errors='ignore') # Cleanup temporary index column

        # Return all relevant results
        return AnalysisResults(
            dataframe=df, # Return the updated dataframe with indicators
            last_signal=signal,
            active_bull_boxes=active_bull_boxes, # Return currently active boxes
            active_bear_boxes=active_bear_boxes,
            last_close=current_close,
            current_trend=self.current_trend,
            trend_changed=trend_just_changed,
            last_atr=last_atr_value
        )
